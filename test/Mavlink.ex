defmodule Mavlink do
  @moduledoc ~s(Mavlink 3.0 generated by Mavlink mix task from /workspaces/elixir/mavlink/test/mavlink.xml on 2017-06-18 11:59:02.926139Z)
   
  @typedoc "An atom representing a Mavlink enumeration type"
  @type enum_type :: :mav_autopilot | :mav_type | :firmware_version_type | :mav_mode_flag | :mav_mode_flag_decode_position | :mav_goto | :mav_mode | :mav_state | :mav_component | :mav_sys_status_sensor | :mav_frame | :mavlink_data_stream_type | :fence_action | :fence_breach | :mav_mount_mode | :mav_cmd | :mav_data_stream | :mav_roi | :mav_cmd_ack | :mav_param_type | :mav_result | :mav_mission_result | :mav_severity | :mav_power_status | :serial_control_dev | :serial_control_flag | :mav_distance_sensor | :mav_sensor_orientation | :mav_protocol_capability | :mav_mission_type | :mav_estimator_type | :mav_battery_type | :mav_battery_function | :mav_vtol_state | :mav_landed_state | :adsb_altitude_type | :adsb_emitter_type | :adsb_flags | :mav_do_reposition_flags | :estimator_status_flags | :motor_test_throttle_type | :gps_input_ignore_flags | :mav_collision_action | :mav_collision_threat_level | :mav_collision_src | :gps_fix_type
   
  @typedoc "An atom representing a Mavlink enumeration type value"
  @type enum_value :: mav_autopilot | mav_type | firmware_version_type | mav_mode_flag | mav_mode_flag_decode_position | mav_goto | mav_mode | mav_state | mav_component | mav_sys_status_sensor | mav_frame | mavlink_data_stream_type | fence_action | fence_breach | mav_mount_mode | mav_cmd | mav_data_stream | mav_roi | mav_cmd_ack | mav_param_type | mav_result | mav_mission_result | mav_severity | mav_power_status | serial_control_dev | serial_control_flag | mav_distance_sensor | mav_sensor_orientation | mav_protocol_capability | mav_mission_type | mav_estimator_type | mav_battery_type | mav_battery_function | mav_vtol_state | mav_landed_state | adsb_altitude_type | adsb_emitter_type | adsb_flags | mav_do_reposition_flags | estimator_status_flags | motor_test_throttle_type | gps_input_ignore_flags | mav_collision_action | mav_collision_threat_level | mav_collision_src | gps_fix_type
  
  @typedoc "Micro air vehicle / autopilot classes. This identifies the individual model."
  @type mav_autopilot :: :mav_autopilot_generic | :mav_autopilot_reserved | :mav_autopilot_slugs | :mav_autopilot_ardupilotmega | :mav_autopilot_openpilot | :mav_autopilot_generic_waypoints_only | :mav_autopilot_generic_waypoints_and_simple_navigation_only | :mav_autopilot_generic_mission_full | :mav_autopilot_invalid | :mav_autopilot_ppz | :mav_autopilot_udb | :mav_autopilot_fp | :mav_autopilot_px4 | :mav_autopilot_smaccmpilot | :mav_autopilot_autoquad | :mav_autopilot_armazila | :mav_autopilot_aerob | :mav_autopilot_asluav | :mav_autopilot_smartap
  @typedoc ""
  @type mav_type :: :mav_type_generic | :mav_type_fixed_wing | :mav_type_quadrotor | :mav_type_coaxial | :mav_type_helicopter | :mav_type_antenna_tracker | :mav_type_gcs | :mav_type_airship | :mav_type_free_balloon | :mav_type_rocket | :mav_type_ground_rover | :mav_type_surface_boat | :mav_type_submarine | :mav_type_hexarotor | :mav_type_octorotor | :mav_type_tricopter | :mav_type_flapping_wing | :mav_type_kite | :mav_type_onboard_controller | :mav_type_vtol_duorotor | :mav_type_vtol_quadrotor | :mav_type_vtol_tiltrotor | :mav_type_vtol_reserved2 | :mav_type_vtol_reserved3 | :mav_type_vtol_reserved4 | :mav_type_vtol_reserved5 | :mav_type_gimbal | :mav_type_adsb
  @typedoc "These values define the type of firmware release. These values indicate the first version or release of this type. For example the first alpha release would be 64, the second would be 65."
  @type firmware_version_type :: :firmware_version_type_dev | :firmware_version_type_alpha | :firmware_version_type_beta | :firmware_version_type_rc | :firmware_version_type_official
  @typedoc "These flags encode the MAV mode."
  @type mav_mode_flag :: :mav_mode_flag_safety_armed | :mav_mode_flag_manual_input_enabled | :mav_mode_flag_hil_enabled | :mav_mode_flag_stabilize_enabled | :mav_mode_flag_guided_enabled | :mav_mode_flag_auto_enabled | :mav_mode_flag_test_enabled | :mav_mode_flag_custom_mode_enabled
  @typedoc "These values encode the bit positions of the decode position. These values can be used to read the value of a flag bit by combining the base_mode variable with AND with the flag position value. The result will be either 0 or 1, depending on if the flag is set or not."
  @type mav_mode_flag_decode_position :: :mav_mode_flag_decode_position_safety | :mav_mode_flag_decode_position_manual | :mav_mode_flag_decode_position_hil | :mav_mode_flag_decode_position_stabilize | :mav_mode_flag_decode_position_guided | :mav_mode_flag_decode_position_auto | :mav_mode_flag_decode_position_test | :mav_mode_flag_decode_position_custom_mode
  @typedoc "Override command, pauses current mission execution and moves immediately to a position"
  @type mav_goto :: :mav_goto_do_hold | :mav_goto_do_continue | :mav_goto_hold_at_current_position | :mav_goto_hold_at_specified_position
  @typedoc "These defines are predefined OR-combined mode flags. There is no need to use values from this enum, but it simplifies the use of the mode flags. Note that manual input is enabled in all modes as a safety override."
  @type mav_mode :: :mav_mode_preflight | :mav_mode_stabilize_disarmed | :mav_mode_stabilize_armed | :mav_mode_manual_disarmed | :mav_mode_manual_armed | :mav_mode_guided_disarmed | :mav_mode_guided_armed | :mav_mode_auto_disarmed | :mav_mode_auto_armed | :mav_mode_test_disarmed | :mav_mode_test_armed
  @typedoc ""
  @type mav_state :: :mav_state_uninit | :mav_state_boot | :mav_state_calibrating | :mav_state_standby | :mav_state_active | :mav_state_critical | :mav_state_emergency | :mav_state_poweroff
  @typedoc ""
  @type mav_component :: :mav_comp_id_all | :mav_comp_id_autopilot1 | :mav_comp_id_camera | :mav_comp_id_servo1 | :mav_comp_id_servo2 | :mav_comp_id_servo3 | :mav_comp_id_servo4 | :mav_comp_id_servo5 | :mav_comp_id_servo6 | :mav_comp_id_servo7 | :mav_comp_id_servo8 | :mav_comp_id_servo9 | :mav_comp_id_servo10 | :mav_comp_id_servo11 | :mav_comp_id_servo12 | :mav_comp_id_servo13 | :mav_comp_id_servo14 | :mav_comp_id_gimbal | :mav_comp_id_log | :mav_comp_id_adsb | :mav_comp_id_osd | :mav_comp_id_peripheral | :mav_comp_id_qx1_gimbal | :mav_comp_id_mapper | :mav_comp_id_missionplanner | :mav_comp_id_pathplanner | :mav_comp_id_imu | :mav_comp_id_imu_2 | :mav_comp_id_imu_3 | :mav_comp_id_gps | :mav_comp_id_gps2 | :mav_comp_id_udp_bridge | :mav_comp_id_uart_bridge | :mav_comp_id_system_control
  @typedoc "These encode the sensors whose status is sent as part of the SYS_STATUS message."
  @type mav_sys_status_sensor :: :mav_sys_status_sensor_3d_gyro | :mav_sys_status_sensor_3d_accel | :mav_sys_status_sensor_3d_mag | :mav_sys_status_sensor_absolute_pressure | :mav_sys_status_sensor_differential_pressure | :mav_sys_status_sensor_gps | :mav_sys_status_sensor_optical_flow | :mav_sys_status_sensor_vision_position | :mav_sys_status_sensor_laser_position | :mav_sys_status_sensor_external_ground_truth | :mav_sys_status_sensor_angular_rate_control | :mav_sys_status_sensor_attitude_stabilization | :mav_sys_status_sensor_yaw_position | :mav_sys_status_sensor_z_altitude_control | :mav_sys_status_sensor_xy_position_control | :mav_sys_status_sensor_motor_outputs | :mav_sys_status_sensor_rc_receiver | :mav_sys_status_sensor_3d_gyro2 | :mav_sys_status_sensor_3d_accel2 | :mav_sys_status_sensor_3d_mag2 | :mav_sys_status_geofence | :mav_sys_status_ahrs | :mav_sys_status_terrain | :mav_sys_status_reverse_motor | :mav_sys_status_logging | :mav_sys_status_sensor_battery
  @typedoc ""
  @type mav_frame :: :mav_frame_global | :mav_frame_local_ned | :mav_frame_mission | :mav_frame_global_relative_alt | :mav_frame_local_enu | :mav_frame_global_int | :mav_frame_global_relative_alt_int | :mav_frame_local_offset_ned | :mav_frame_body_ned | :mav_frame_body_offset_ned | :mav_frame_global_terrain_alt | :mav_frame_global_terrain_alt_int
  @typedoc ""
  @type mavlink_data_stream_type :: :mavlink_data_stream_img_jpeg | :mavlink_data_stream_img_bmp | :mavlink_data_stream_img_raw8u | :mavlink_data_stream_img_raw32u | :mavlink_data_stream_img_pgm | :mavlink_data_stream_img_png
  @typedoc ""
  @type fence_action :: :fence_action_none | :fence_action_guided | :fence_action_report | :fence_action_guided_thr_pass | :fence_action_rtl
  @typedoc ""
  @type fence_breach :: :fence_breach_none | :fence_breach_minalt | :fence_breach_maxalt | :fence_breach_boundary
  @typedoc "Enumeration of possible mount operation modes"
  @type mav_mount_mode :: :mav_mount_mode_retract | :mav_mount_mode_neutral | :mav_mount_mode_mavlink_targeting | :mav_mount_mode_rc_targeting | :mav_mount_mode_gps_point
  @typedoc "Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data."
  @type mav_cmd :: :mav_cmd_nav_waypoint | :mav_cmd_nav_loiter_unlim | :mav_cmd_nav_loiter_turns | :mav_cmd_nav_loiter_time | :mav_cmd_nav_return_to_launch | :mav_cmd_nav_land | :mav_cmd_nav_takeoff | :mav_cmd_nav_land_local | :mav_cmd_nav_takeoff_local | :mav_cmd_nav_follow | :mav_cmd_nav_continue_and_change_alt | :mav_cmd_nav_loiter_to_alt | :mav_cmd_do_follow | :mav_cmd_do_follow_reposition | :mav_cmd_nav_roi | :mav_cmd_nav_pathplanning | :mav_cmd_nav_spline_waypoint | :mav_cmd_nav_vtol_takeoff | :mav_cmd_nav_vtol_land | :mav_cmd_nav_guided_enable | :mav_cmd_nav_delay | :mav_cmd_nav_payload_place | :mav_cmd_nav_last | :mav_cmd_condition_delay | :mav_cmd_condition_change_alt | :mav_cmd_condition_distance | :mav_cmd_condition_yaw | :mav_cmd_condition_last | :mav_cmd_do_set_mode | :mav_cmd_do_jump | :mav_cmd_do_change_speed | :mav_cmd_do_set_home | :mav_cmd_do_set_parameter | :mav_cmd_do_set_relay | :mav_cmd_do_repeat_relay | :mav_cmd_do_set_servo | :mav_cmd_do_repeat_servo | :mav_cmd_do_flighttermination | :mav_cmd_do_change_altitude | :mav_cmd_do_land_start | :mav_cmd_do_rally_land | :mav_cmd_do_go_around | :mav_cmd_do_reposition | :mav_cmd_do_pause_continue | :mav_cmd_do_set_reverse | :mav_cmd_do_control_video | :mav_cmd_do_set_roi | :mav_cmd_do_digicam_configure | :mav_cmd_do_digicam_control | :mav_cmd_do_mount_configure | :mav_cmd_do_mount_control | :mav_cmd_do_set_cam_trigg_dist | :mav_cmd_do_fence_enable | :mav_cmd_do_parachute | :mav_cmd_do_motor_test | :mav_cmd_do_inverted_flight | :mav_cmd_nav_set_yaw_speed | :mav_cmd_do_set_cam_trigg_interval | :mav_cmd_do_mount_control_quat | :mav_cmd_do_guided_master | :mav_cmd_do_guided_limits | :mav_cmd_do_engine_control | :mav_cmd_do_last | :mav_cmd_preflight_calibration | :mav_cmd_preflight_set_sensor_offsets | :mav_cmd_preflight_uavcan | :mav_cmd_preflight_storage | :mav_cmd_preflight_reboot_shutdown | :mav_cmd_override_goto | :mav_cmd_mission_start | :mav_cmd_component_arm_disarm | :mav_cmd_get_home_position | :mav_cmd_start_rx_pair | :mav_cmd_get_message_interval | :mav_cmd_set_message_interval | :mav_cmd_request_protocol_version | :mav_cmd_request_autopilot_capabilities | :mav_cmd_request_camera_information | :mav_cmd_request_camera_settings | :mav_cmd_set_camera_settings_1 | :mav_cmd_set_camera_settings_2 | :mav_cmd_request_storage_information | :mav_cmd_storage_format | :mav_cmd_request_camera_capture_status | :mav_cmd_request_flight_information | :mav_cmd_reset_camera_settings | :mav_cmd_set_camera_mode | :mav_cmd_image_start_capture | :mav_cmd_image_stop_capture | :mav_cmd_request_camera_image_capture | :mav_cmd_do_trigger_control | :mav_cmd_video_start_capture | :mav_cmd_video_stop_capture | :mav_cmd_video_start_streaming | :mav_cmd_video_stop_streaming | :mav_cmd_request_video_stream_information | :mav_cmd_logging_start | :mav_cmd_logging_stop | :mav_cmd_airframe_configuration | :mav_cmd_panorama_create | :mav_cmd_do_vtol_transition | :mav_cmd_set_guided_submode_standard | :mav_cmd_set_guided_submode_circle | :mav_cmd_nav_fence_return_point | :mav_cmd_nav_fence_polygon_vertex_inclusion | :mav_cmd_nav_fence_polygon_vertex_exclusion | :mav_cmd_nav_fence_circle_inclusion | :mav_cmd_nav_fence_circle_exclusion | :mav_cmd_nav_rally_point | :mav_cmd_payload_prepare_deploy | :mav_cmd_payload_control_deploy | :mav_cmd_waypoint_user_1 | :mav_cmd_waypoint_user_2 | :mav_cmd_waypoint_user_3 | :mav_cmd_waypoint_user_4 | :mav_cmd_waypoint_user_5 | :mav_cmd_spatial_user_1 | :mav_cmd_spatial_user_2 | :mav_cmd_spatial_user_3 | :mav_cmd_spatial_user_4 | :mav_cmd_spatial_user_5 | :mav_cmd_user_1 | :mav_cmd_user_2 | :mav_cmd_user_3 | :mav_cmd_user_4 | :mav_cmd_user_5
  @typedoc "THIS INTERFACE IS DEPRECATED AS OF JULY 2015. Please use MESSAGE_INTERVAL instead. A data stream is not a fixed set of messages, but rather a recommendation to the autopilot software. Individual autopilots may or may not obey the recommended messages."
  @type mav_data_stream :: :mav_data_stream_all | :mav_data_stream_raw_sensors | :mav_data_stream_extended_status | :mav_data_stream_rc_channels | :mav_data_stream_raw_controller | :mav_data_stream_position | :mav_data_stream_extra1 | :mav_data_stream_extra2 | :mav_data_stream_extra3
  @typedoc "The ROI (region of interest) for the vehicle. This can be be used by the vehicle for camera/vehicle attitude alignment (see MAV_CMD_NAV_ROI)."
  @type mav_roi :: :mav_roi_none | :mav_roi_wpnext | :mav_roi_wpindex | :mav_roi_location | :mav_roi_target
  @typedoc "ACK / NACK / ERROR values as a result of MAV_CMDs and for mission item transmission."
  @type mav_cmd_ack :: :mav_cmd_ack_ok | :mav_cmd_ack_err_fail | :mav_cmd_ack_err_access_denied | :mav_cmd_ack_err_not_supported | :mav_cmd_ack_err_coordinate_frame_not_supported | :mav_cmd_ack_err_coordinates_out_of_range | :mav_cmd_ack_err_x_lat_out_of_range | :mav_cmd_ack_err_y_lon_out_of_range | :mav_cmd_ack_err_z_alt_out_of_range
  @typedoc "Specifies the datatype of a MAVLink parameter."
  @type mav_param_type :: :mav_param_type_uint8 | :mav_param_type_int8 | :mav_param_type_uint16 | :mav_param_type_int16 | :mav_param_type_uint32 | :mav_param_type_int32 | :mav_param_type_uint64 | :mav_param_type_int64 | :mav_param_type_real32 | :mav_param_type_real64
  @typedoc "result from a mavlink command"
  @type mav_result :: :mav_result_accepted | :mav_result_temporarily_rejected | :mav_result_denied | :mav_result_unsupported | :mav_result_failed | :mav_result_in_progress
  @typedoc "result in a mavlink mission ack"
  @type mav_mission_result :: :mav_mission_accepted | :mav_mission_error | :mav_mission_unsupported_frame | :mav_mission_unsupported | :mav_mission_no_space | :mav_mission_invalid | :mav_mission_invalid_param1 | :mav_mission_invalid_param2 | :mav_mission_invalid_param3 | :mav_mission_invalid_param4 | :mav_mission_invalid_param5_x | :mav_mission_invalid_param6_y | :mav_mission_invalid_param7 | :mav_mission_invalid_sequence | :mav_mission_denied
  @typedoc "Indicates the severity level, generally used for status messages to indicate their relative urgency. Based on RFC-5424 using expanded definitions at: http://www.kiwisyslog.com/kb/info:-syslog-message-levels/."
  @type mav_severity :: :mav_severity_emergency | :mav_severity_alert | :mav_severity_critical | :mav_severity_error | :mav_severity_warning | :mav_severity_notice | :mav_severity_info | :mav_severity_debug
  @typedoc "Power supply status flags (bitmask)"
  @type mav_power_status :: :mav_power_status_brick_valid | :mav_power_status_servo_valid | :mav_power_status_usb_connected | :mav_power_status_periph_overcurrent | :mav_power_status_periph_hipower_overcurrent | :mav_power_status_changed
  @typedoc "SERIAL_CONTROL device types"
  @type serial_control_dev :: :serial_control_dev_telem1 | :serial_control_dev_telem2 | :serial_control_dev_gps1 | :serial_control_dev_gps2 | :serial_control_dev_shell
  @typedoc "SERIAL_CONTROL flags (bitmask)"
  @type serial_control_flag :: :serial_control_flag_reply | :serial_control_flag_respond | :serial_control_flag_exclusive | :serial_control_flag_blocking | :serial_control_flag_multi
  @typedoc "Enumeration of distance sensor types"
  @type mav_distance_sensor :: :mav_distance_sensor_laser | :mav_distance_sensor_ultrasound | :mav_distance_sensor_infrared
  @typedoc "Enumeration of sensor orientation, according to its rotations"
  @type mav_sensor_orientation :: :mav_sensor_rotation_none | :mav_sensor_rotation_yaw_45 | :mav_sensor_rotation_yaw_90 | :mav_sensor_rotation_yaw_135 | :mav_sensor_rotation_yaw_180 | :mav_sensor_rotation_yaw_225 | :mav_sensor_rotation_yaw_270 | :mav_sensor_rotation_yaw_315 | :mav_sensor_rotation_roll_180 | :mav_sensor_rotation_roll_180_yaw_45 | :mav_sensor_rotation_roll_180_yaw_90 | :mav_sensor_rotation_roll_180_yaw_135 | :mav_sensor_rotation_pitch_180 | :mav_sensor_rotation_roll_180_yaw_225 | :mav_sensor_rotation_roll_180_yaw_270 | :mav_sensor_rotation_roll_180_yaw_315 | :mav_sensor_rotation_roll_90 | :mav_sensor_rotation_roll_90_yaw_45 | :mav_sensor_rotation_roll_90_yaw_90 | :mav_sensor_rotation_roll_90_yaw_135 | :mav_sensor_rotation_roll_270 | :mav_sensor_rotation_roll_270_yaw_45 | :mav_sensor_rotation_roll_270_yaw_90 | :mav_sensor_rotation_roll_270_yaw_135 | :mav_sensor_rotation_pitch_90 | :mav_sensor_rotation_pitch_270 | :mav_sensor_rotation_pitch_180_yaw_90 | :mav_sensor_rotation_pitch_180_yaw_270 | :mav_sensor_rotation_roll_90_pitch_90 | :mav_sensor_rotation_roll_180_pitch_90 | :mav_sensor_rotation_roll_270_pitch_90 | :mav_sensor_rotation_roll_90_pitch_180 | :mav_sensor_rotation_roll_270_pitch_180 | :mav_sensor_rotation_roll_90_pitch_270 | :mav_sensor_rotation_roll_180_pitch_270 | :mav_sensor_rotation_roll_270_pitch_270 | :mav_sensor_rotation_roll_90_pitch_180_yaw_90 | :mav_sensor_rotation_roll_90_yaw_270 | :mav_sensor_rotation_roll_315_pitch_315_yaw_315
  @typedoc "Bitmask of (optional) autopilot capabilities (64 bit). If a bit is set, the autopilot supports this capability."
  @type mav_protocol_capability :: :mav_protocol_capability_mission_float | :mav_protocol_capability_param_float | :mav_protocol_capability_mission_int | :mav_protocol_capability_command_int | :mav_protocol_capability_param_union | :mav_protocol_capability_ftp | :mav_protocol_capability_set_attitude_target | :mav_protocol_capability_set_position_target_local_ned | :mav_protocol_capability_set_position_target_global_int | :mav_protocol_capability_terrain | :mav_protocol_capability_set_actuator_target | :mav_protocol_capability_flight_termination | :mav_protocol_capability_compass_calibration | :mav_protocol_capability_mavlink2 | :mav_protocol_capability_mission_fence | :mav_protocol_capability_mission_rally | :mav_protocol_capability_flight_information
  @typedoc "Type of mission items being requested/sent in mission protocol."
  @type mav_mission_type :: :mav_mission_type_mission | :mav_mission_type_fence | :mav_mission_type_rally | :mav_mission_type_all
  @typedoc "Enumeration of estimator types"
  @type mav_estimator_type :: :mav_estimator_type_naive | :mav_estimator_type_vision | :mav_estimator_type_vio | :mav_estimator_type_gps | :mav_estimator_type_gps_ins
  @typedoc "Enumeration of battery types"
  @type mav_battery_type :: :mav_battery_type_unknown | :mav_battery_type_lipo | :mav_battery_type_life | :mav_battery_type_lion | :mav_battery_type_nimh
  @typedoc "Enumeration of battery functions"
  @type mav_battery_function :: :mav_battery_function_unknown | :mav_battery_function_all | :mav_battery_function_propulsion | :mav_battery_function_avionics | :mav_battery_type_payload
  @typedoc "Enumeration of VTOL states"
  @type mav_vtol_state :: :mav_vtol_state_undefined | :mav_vtol_state_transition_to_fw | :mav_vtol_state_transition_to_mc | :mav_vtol_state_mc | :mav_vtol_state_fw
  @typedoc "Enumeration of landed detector states"
  @type mav_landed_state :: :mav_landed_state_undefined | :mav_landed_state_on_ground | :mav_landed_state_in_air | :mav_landed_state_takeoff | :mav_landed_state_landing
  @typedoc "Enumeration of the ADSB altimeter types"
  @type adsb_altitude_type :: :adsb_altitude_type_pressure_qnh | :adsb_altitude_type_geometric
  @typedoc "ADSB classification for the type of vehicle emitting the transponder signal"
  @type adsb_emitter_type :: :adsb_emitter_type_no_info | :adsb_emitter_type_light | :adsb_emitter_type_small | :adsb_emitter_type_large | :adsb_emitter_type_high_vortex_large | :adsb_emitter_type_heavy | :adsb_emitter_type_highly_manuv | :adsb_emitter_type_rotocraft | :adsb_emitter_type_unassigned | :adsb_emitter_type_glider | :adsb_emitter_type_lighter_air | :adsb_emitter_type_parachute | :adsb_emitter_type_ultra_light | :adsb_emitter_type_unassigned2 | :adsb_emitter_type_uav | :adsb_emitter_type_space | :adsb_emitter_type_unassgined3 | :adsb_emitter_type_emergency_surface | :adsb_emitter_type_service_surface | :adsb_emitter_type_point_obstacle
  @typedoc "These flags indicate status such as data validity of each data source. Set = data valid"
  @type adsb_flags :: :adsb_flags_valid_coords | :adsb_flags_valid_altitude | :adsb_flags_valid_heading | :adsb_flags_valid_velocity | :adsb_flags_valid_callsign | :adsb_flags_valid_squawk | :adsb_flags_simulated
  @typedoc "Bitmask of options for the MAV_CMD_DO_REPOSITION"
  @type mav_do_reposition_flags :: :mav_do_reposition_flags_change_mode
  @typedoc "Flags in EKF_STATUS message"
  @type estimator_status_flags :: :estimator_attitude | :estimator_velocity_horiz | :estimator_velocity_vert | :estimator_pos_horiz_rel | :estimator_pos_horiz_abs | :estimator_pos_vert_abs | :estimator_pos_vert_agl | :estimator_const_pos_mode | :estimator_pred_pos_horiz_rel | :estimator_pred_pos_horiz_abs | :estimator_gps_glitch
  @typedoc ""
  @type motor_test_throttle_type :: :motor_test_throttle_percent | :motor_test_throttle_pwm | :motor_test_throttle_pilot
  @typedoc ""
  @type gps_input_ignore_flags :: :gps_input_ignore_flag_alt | :gps_input_ignore_flag_hdop | :gps_input_ignore_flag_vdop | :gps_input_ignore_flag_vel_horiz | :gps_input_ignore_flag_vel_vert | :gps_input_ignore_flag_speed_accuracy | :gps_input_ignore_flag_horizontal_accuracy | :gps_input_ignore_flag_vertical_accuracy
  @typedoc "Possible actions an aircraft can take to avoid a collision."
  @type mav_collision_action :: :mav_collision_action_none | :mav_collision_action_report | :mav_collision_action_ascend_or_descend | :mav_collision_action_move_horizontally | :mav_collision_action_move_perpendicular | :mav_collision_action_rtl | :mav_collision_action_hover
  @typedoc "Aircraft-rated danger from this threat."
  @type mav_collision_threat_level :: :mav_collision_threat_level_none | :mav_collision_threat_level_low | :mav_collision_threat_level_high
  @typedoc "Source of information about this collision."
  @type mav_collision_src :: :mav_collision_src_adsb | :mav_collision_src_mavlink_gps_global_int
  @typedoc "Type of GPS fix"
  @type gps_fix_type :: :gps_fix_type_no_gps | :gps_fix_type_no_fix | :gps_fix_type_2d_fix | :gps_fix_type_3d_fix | :gps_fix_type_dgps | :gps_fix_type_rtk_float | :gps_fix_type_rtk_fixed | :gps_fix_type_static
  
  @typedoc "A parameter description"
  @type param_description :: %{
    index: pos_integer,
    description: String.t
  }
  
  @typedoc "A list of parameter descriptions"
  @type param_description_list :: [param_description]
  
  @typedoc "Type used for field in encoded message"
  @type field_type :: int8 | int16 | int32 | int64 | uint8 | uint16 | uint32 | uint64 | float
  
  @typedoc "8-bit signed integer"
  @type int8 :: -128..127
  
  @typedoc "16-bit signed integer"
  @type int16 :: -32_768..32_767
  
  @typedoc "32-bit signed integer"
  @type int32 :: -2_147_483_647..2_147_483_647
  
  @typedoc "64-bit signed integer"
  @type int64 :: integer
  
  @typedoc "8-bit unsigned integer"
  @type uint8 :: 0..255
  
  @typedoc "16-bit unsigned integer"
  @type uint16 :: 0..65_535
  
  @typedoc "32-bit unsigned integer"
  @type uint32 :: 0..4_294_967_295
  
  @typedoc "64-bit unsigned integer"
  @type uint64 :: pos_integer
  
  @typedoc "0 -> not an array 1..255 an array"
  @type field_ordinality :: 0..255
  
  @typedoc "Measurement unit of field value"
  @type field_unit :: :pc | :bytes | :bps | :cpc | :cA | :cdeg | :cmps | :deg | :degE7 | :Mibytes | :m | :mm | :ms | :mV | :pix | :s | :us  # TODO generate unique set from fields
  
  @typedoc "A message field description"
  @type field_description :: %{
    type: field_type,
    ordinality: field_ordinality,
    name: String.t,
    units: field_unit,
    description: String.t
  }
  
  @typedoc "A list of message field descriptions"
  @type field_description_list :: [field_description]
  
  @typedoc "A Mavlink message"
  @type message :: Heartbeat.t  # TODO generate
  
  @typedoc "A Mavlink message id"
  @type message_id :: pos_integer
   
  @doc "Mavlink version"
  @spec mavlink_version() :: integer
  def mavlink_version(), do: 3
   
  @doc "Mavlink dialect"
  @spec mavlink_dialect() :: integer
  def mavlink_dialect(), do: 0
   
  @doc "Return a String description of a Mavlink enumeration"
  @spec describe(enum_type | enum_value) :: String.t
  def describe(:mav_autopilot), do: "Micro air vehicle / autopilot classes. This identifies the individual model."
  def describe(:mav_autopilot_generic), do: "Generic autopilot, full support for everything"
  def describe(:mav_autopilot_reserved), do: "Reserved for future use."
  def describe(:mav_autopilot_slugs), do: "SLUGS autopilot, http://slugsuav.soe.ucsc.edu"
  def describe(:mav_autopilot_ardupilotmega), do: "ArduPilotMega / ArduCopter, http://diydrones.com"
  def describe(:mav_autopilot_openpilot), do: "OpenPilot, http://openpilot.org"
  def describe(:mav_autopilot_generic_waypoints_only), do: "Generic autopilot only supporting simple waypoints"
  def describe(:mav_autopilot_generic_waypoints_and_simple_navigation_only), do: "Generic autopilot supporting waypoints and other simple navigation commands"
  def describe(:mav_autopilot_generic_mission_full), do: "Generic autopilot supporting the full mission command set"
  def describe(:mav_autopilot_invalid), do: "No valid autopilot, e.g. a GCS or other MAVLink component"
  def describe(:mav_autopilot_ppz), do: "PPZ UAV - http://nongnu.org/paparazzi"
  def describe(:mav_autopilot_udb), do: "UAV Dev Board"
  def describe(:mav_autopilot_fp), do: "FlexiPilot"
  def describe(:mav_autopilot_px4), do: "PX4 Autopilot - http://pixhawk.ethz.ch/px4/"
  def describe(:mav_autopilot_smaccmpilot), do: "SMACCMPilot - http://smaccmpilot.org"
  def describe(:mav_autopilot_autoquad), do: "AutoQuad -- http://autoquad.org"
  def describe(:mav_autopilot_armazila), do: "Armazila -- http://armazila.com"
  def describe(:mav_autopilot_aerob), do: "Aerob -- http://aerob.ru"
  def describe(:mav_autopilot_asluav), do: "ASLUAV autopilot -- http://www.asl.ethz.ch"
  def describe(:mav_autopilot_smartap), do: "SmartAP Autopilot - http://sky-drones.com"
  def describe(:mav_type), do: ""
  def describe(:mav_type_generic), do: "Generic micro air vehicle."
  def describe(:mav_type_fixed_wing), do: "Fixed wing aircraft."
  def describe(:mav_type_quadrotor), do: "Quadrotor"
  def describe(:mav_type_coaxial), do: "Coaxial helicopter"
  def describe(:mav_type_helicopter), do: "Normal helicopter with tail rotor."
  def describe(:mav_type_antenna_tracker), do: "Ground installation"
  def describe(:mav_type_gcs), do: "Operator control unit / ground control station"
  def describe(:mav_type_airship), do: "Airship, controlled"
  def describe(:mav_type_free_balloon), do: "Free balloon, uncontrolled"
  def describe(:mav_type_rocket), do: "Rocket"
  def describe(:mav_type_ground_rover), do: "Ground rover"
  def describe(:mav_type_surface_boat), do: "Surface vessel, boat, ship"
  def describe(:mav_type_submarine), do: "Submarine"
  def describe(:mav_type_hexarotor), do: "Hexarotor"
  def describe(:mav_type_octorotor), do: "Octorotor"
  def describe(:mav_type_tricopter), do: "Tricopter"
  def describe(:mav_type_flapping_wing), do: "Flapping wing"
  def describe(:mav_type_kite), do: "Kite"
  def describe(:mav_type_onboard_controller), do: "Onboard companion controller"
  def describe(:mav_type_vtol_duorotor), do: "Two-rotor VTOL using control surfaces in vertical operation in addition. Tailsitter."
  def describe(:mav_type_vtol_quadrotor), do: "Quad-rotor VTOL using a V-shaped quad config in vertical operation. Tailsitter."
  def describe(:mav_type_vtol_tiltrotor), do: "Tiltrotor VTOL"
  def describe(:mav_type_vtol_reserved2), do: "VTOL reserved 2"
  def describe(:mav_type_vtol_reserved3), do: "VTOL reserved 3"
  def describe(:mav_type_vtol_reserved4), do: "VTOL reserved 4"
  def describe(:mav_type_vtol_reserved5), do: "VTOL reserved 5"
  def describe(:mav_type_gimbal), do: "Onboard gimbal"
  def describe(:mav_type_adsb), do: "Onboard ADSB peripheral"
  def describe(:firmware_version_type), do: "These values define the type of firmware release. These values indicate the first version or release of this type. For example the first alpha release would be 64, the second would be 65."
  def describe(:firmware_version_type_dev), do: "development release"
  def describe(:firmware_version_type_alpha), do: "alpha release"
  def describe(:firmware_version_type_beta), do: "beta release"
  def describe(:firmware_version_type_rc), do: "release candidate"
  def describe(:firmware_version_type_official), do: "official stable release"
  def describe(:mav_mode_flag), do: "These flags encode the MAV mode."
  def describe(:mav_mode_flag_safety_armed), do: "0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly. Additional note: this flag is to be ignore when sent in the command MAV_CMD_DO_SET_MODE and MAV_CMD_COMPONENT_ARM_DISARM shall be used instead. The flag can still be used to report the armed state."
  def describe(:mav_mode_flag_manual_input_enabled), do: "0b01000000 remote control input is enabled."
  def describe(:mav_mode_flag_hil_enabled), do: "0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational."
  def describe(:mav_mode_flag_stabilize_enabled), do: "0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around."
  def describe(:mav_mode_flag_guided_enabled), do: "0b00001000 guided mode enabled, system flies MISSIONs / mission items."
  def describe(:mav_mode_flag_auto_enabled), do: "0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation."
  def describe(:mav_mode_flag_test_enabled), do: "0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations."
  def describe(:mav_mode_flag_custom_mode_enabled), do: "0b00000001 Reserved for future use."
  def describe(:mav_mode_flag_decode_position), do: "These values encode the bit positions of the decode position. These values can be used to read the value of a flag bit by combining the base_mode variable with AND with the flag position value. The result will be either 0 or 1, depending on if the flag is set or not."
  def describe(:mav_mode_flag_decode_position_safety), do: "First bit: 10000000"
  def describe(:mav_mode_flag_decode_position_manual), do: "Second bit: 01000000"
  def describe(:mav_mode_flag_decode_position_hil), do: "Third bit: 00100000"
  def describe(:mav_mode_flag_decode_position_stabilize), do: "Fourth bit: 00010000"
  def describe(:mav_mode_flag_decode_position_guided), do: "Fifth bit: 00001000"
  def describe(:mav_mode_flag_decode_position_auto), do: "Sixt bit: 00000100"
  def describe(:mav_mode_flag_decode_position_test), do: "Seventh bit: 00000010"
  def describe(:mav_mode_flag_decode_position_custom_mode), do: "Eighth bit: 00000001"
  def describe(:mav_goto), do: "Override command, pauses current mission execution and moves immediately to a position"
  def describe(:mav_goto_do_hold), do: "Hold at the current position."
  def describe(:mav_goto_do_continue), do: "Continue with the next item in mission execution."
  def describe(:mav_goto_hold_at_current_position), do: "Hold at the current position of the system"
  def describe(:mav_goto_hold_at_specified_position), do: "Hold at the position specified in the parameters of the DO_HOLD action"
  def describe(:mav_mode), do: "These defines are predefined OR-combined mode flags. There is no need to use values from this enum, but it simplifies the use of the mode flags. Note that manual input is enabled in all modes as a safety override."
  def describe(:mav_mode_preflight), do: "System is not ready to fly, booting, calibrating, etc. No flag is set."
  def describe(:mav_mode_stabilize_disarmed), do: "System is allowed to be active, under assisted RC control."
  def describe(:mav_mode_stabilize_armed), do: "System is allowed to be active, under assisted RC control."
  def describe(:mav_mode_manual_disarmed), do: "System is allowed to be active, under manual (RC) control, no stabilization"
  def describe(:mav_mode_manual_armed), do: "System is allowed to be active, under manual (RC) control, no stabilization"
  def describe(:mav_mode_guided_disarmed), do: "System is allowed to be active, under autonomous control, manual setpoint"
  def describe(:mav_mode_guided_armed), do: "System is allowed to be active, under autonomous control, manual setpoint"
  def describe(:mav_mode_auto_disarmed), do: "System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by MISSIONs)"
  def describe(:mav_mode_auto_armed), do: "System is allowed to be active, under autonomous control and navigation (the trajectory is decided onboard and not pre-programmed by MISSIONs)"
  def describe(:mav_mode_test_disarmed), do: "UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only."
  def describe(:mav_mode_test_armed), do: "UNDEFINED mode. This solely depends on the autopilot - use with caution, intended for developers only."
  def describe(:mav_state), do: ""
  def describe(:mav_state_uninit), do: "Uninitialized system, state is unknown."
  def describe(:mav_state_boot), do: "System is booting up."
  def describe(:mav_state_calibrating), do: "System is calibrating and not flight-ready."
  def describe(:mav_state_standby), do: "System is grounded and on standby. It can be launched any time."
  def describe(:mav_state_active), do: "System is active and might be already airborne. Motors are engaged."
  def describe(:mav_state_critical), do: "System is in a non-normal flight mode. It can however still navigate."
  def describe(:mav_state_emergency), do: "System is in a non-normal flight mode. It lost control over parts or over the whole airframe. It is in mayday and going down."
  def describe(:mav_state_poweroff), do: "System just initialized its power-down sequence, will shut down now."
  def describe(:mav_component), do: ""
  def describe(:mav_comp_id_all), do: ""
  def describe(:mav_comp_id_autopilot1), do: ""
  def describe(:mav_comp_id_camera), do: ""
  def describe(:mav_comp_id_servo1), do: ""
  def describe(:mav_comp_id_servo2), do: ""
  def describe(:mav_comp_id_servo3), do: ""
  def describe(:mav_comp_id_servo4), do: ""
  def describe(:mav_comp_id_servo5), do: ""
  def describe(:mav_comp_id_servo6), do: ""
  def describe(:mav_comp_id_servo7), do: ""
  def describe(:mav_comp_id_servo8), do: ""
  def describe(:mav_comp_id_servo9), do: ""
  def describe(:mav_comp_id_servo10), do: ""
  def describe(:mav_comp_id_servo11), do: ""
  def describe(:mav_comp_id_servo12), do: ""
  def describe(:mav_comp_id_servo13), do: ""
  def describe(:mav_comp_id_servo14), do: ""
  def describe(:mav_comp_id_gimbal), do: ""
  def describe(:mav_comp_id_log), do: ""
  def describe(:mav_comp_id_adsb), do: ""
  def describe(:mav_comp_id_osd), do: "On Screen Display (OSD) devices for video links"
  def describe(:mav_comp_id_peripheral), do: "Generic autopilot peripheral component ID. Meant for devices that do not implement the parameter sub-protocol"
  def describe(:mav_comp_id_qx1_gimbal), do: ""
  def describe(:mav_comp_id_mapper), do: ""
  def describe(:mav_comp_id_missionplanner), do: ""
  def describe(:mav_comp_id_pathplanner), do: ""
  def describe(:mav_comp_id_imu), do: ""
  def describe(:mav_comp_id_imu_2), do: ""
  def describe(:mav_comp_id_imu_3), do: ""
  def describe(:mav_comp_id_gps), do: ""
  def describe(:mav_comp_id_gps2), do: ""
  def describe(:mav_comp_id_udp_bridge), do: ""
  def describe(:mav_comp_id_uart_bridge), do: ""
  def describe(:mav_comp_id_system_control), do: ""
  def describe(:mav_sys_status_sensor), do: "These encode the sensors whose status is sent as part of the SYS_STATUS message."
  def describe(:mav_sys_status_sensor_3d_gyro), do: "0x01 3D gyro"
  def describe(:mav_sys_status_sensor_3d_accel), do: "0x02 3D accelerometer"
  def describe(:mav_sys_status_sensor_3d_mag), do: "0x04 3D magnetometer"
  def describe(:mav_sys_status_sensor_absolute_pressure), do: "0x08 absolute pressure"
  def describe(:mav_sys_status_sensor_differential_pressure), do: "0x10 differential pressure"
  def describe(:mav_sys_status_sensor_gps), do: "0x20 GPS"
  def describe(:mav_sys_status_sensor_optical_flow), do: "0x40 optical flow"
  def describe(:mav_sys_status_sensor_vision_position), do: "0x80 computer vision position"
  def describe(:mav_sys_status_sensor_laser_position), do: "0x100 laser based position"
  def describe(:mav_sys_status_sensor_external_ground_truth), do: "0x200 external ground truth (Vicon or Leica)"
  def describe(:mav_sys_status_sensor_angular_rate_control), do: "0x400 3D angular rate control"
  def describe(:mav_sys_status_sensor_attitude_stabilization), do: "0x800 attitude stabilization"
  def describe(:mav_sys_status_sensor_yaw_position), do: "0x1000 yaw position"
  def describe(:mav_sys_status_sensor_z_altitude_control), do: "0x2000 z/altitude control"
  def describe(:mav_sys_status_sensor_xy_position_control), do: "0x4000 x/y position control"
  def describe(:mav_sys_status_sensor_motor_outputs), do: "0x8000 motor outputs / control"
  def describe(:mav_sys_status_sensor_rc_receiver), do: "0x10000 rc receiver"
  def describe(:mav_sys_status_sensor_3d_gyro2), do: "0x20000 2nd 3D gyro"
  def describe(:mav_sys_status_sensor_3d_accel2), do: "0x40000 2nd 3D accelerometer"
  def describe(:mav_sys_status_sensor_3d_mag2), do: "0x80000 2nd 3D magnetometer"
  def describe(:mav_sys_status_geofence), do: "0x100000 geofence"
  def describe(:mav_sys_status_ahrs), do: "0x200000 AHRS subsystem health"
  def describe(:mav_sys_status_terrain), do: "0x400000 Terrain subsystem health"
  def describe(:mav_sys_status_reverse_motor), do: "0x800000 Motors are reversed"
  def describe(:mav_sys_status_logging), do: "0x1000000 Logging"
  def describe(:mav_sys_status_sensor_battery), do: "0x2000000 Battery"
  def describe(:mav_frame), do: ""
  def describe(:mav_frame_global), do: "Global coordinate frame, WGS84 coordinate system. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL)"
  def describe(:mav_frame_local_ned), do: "Local coordinate frame, Z-up (x: north, y: east, z: down)."
  def describe(:mav_frame_mission), do: "NOT a coordinate frame, indicates a mission command."
  def describe(:mav_frame_global_relative_alt), do: "Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home location."
  def describe(:mav_frame_local_enu), do: "Local coordinate frame, Z-down (x: east, y: north, z: up)"
  def describe(:mav_frame_global_int), do: "Global coordinate frame, WGS84 coordinate system. First value / x: latitude in degrees*1.0e-7, second value / y: longitude in degrees*1.0e-7, third value / z: positive altitude over mean sea level (MSL)"
  def describe(:mav_frame_global_relative_alt_int), do: "Global coordinate frame, WGS84 coordinate system, relative altitude over ground with respect to the home position. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude with 0 being at the altitude of the home location."
  def describe(:mav_frame_local_offset_ned), do: "Offset to the current local frame. Anything expressed in this frame should be added to the current local frame position."
  def describe(:mav_frame_body_ned), do: "Setpoint in body NED frame. This makes sense if all position control is externalized - e.g. useful to command 2 m/s^2 acceleration to the right."
  def describe(:mav_frame_body_offset_ned), do: "Offset in body NED frame. This makes sense if adding setpoints to the current flight path, to avoid an obstacle - e.g. useful to command 2 m/s^2 acceleration to the east."
  def describe(:mav_frame_global_terrain_alt), do: "Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees, second value / y: longitude in degrees, third value / z: positive altitude in meters with 0 being at ground level in terrain model."
  def describe(:mav_frame_global_terrain_alt_int), do: "Global coordinate frame with above terrain level altitude. WGS84 coordinate system, relative altitude over terrain with respect to the waypoint coordinate. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude in meters with 0 being at ground level in terrain model."
  def describe(:mavlink_data_stream_type), do: ""
  def describe(:mavlink_data_stream_img_jpeg), do: ""
  def describe(:mavlink_data_stream_img_bmp), do: ""
  def describe(:mavlink_data_stream_img_raw8u), do: ""
  def describe(:mavlink_data_stream_img_raw32u), do: ""
  def describe(:mavlink_data_stream_img_pgm), do: ""
  def describe(:mavlink_data_stream_img_png), do: ""
  def describe(:fence_action), do: ""
  def describe(:fence_action_none), do: "Disable fenced mode"
  def describe(:fence_action_guided), do: "Switched to guided mode to return point (fence point 0)"
  def describe(:fence_action_report), do: "Report fence breach, but don't take action"
  def describe(:fence_action_guided_thr_pass), do: "Switched to guided mode to return point (fence point 0) with manual throttle control"
  def describe(:fence_action_rtl), do: "Switch to RTL (return to launch) mode and head for the return point."
  def describe(:fence_breach), do: ""
  def describe(:fence_breach_none), do: "No last fence breach"
  def describe(:fence_breach_minalt), do: "Breached minimum altitude"
  def describe(:fence_breach_maxalt), do: "Breached maximum altitude"
  def describe(:fence_breach_boundary), do: "Breached fence boundary"
  def describe(:mav_mount_mode), do: "Enumeration of possible mount operation modes"
  def describe(:mav_mount_mode_retract), do: "Load and keep safe position (Roll,Pitch,Yaw) from permant memory and stop stabilization"
  def describe(:mav_mount_mode_neutral), do: "Load and keep neutral position (Roll,Pitch,Yaw) from permanent memory."
  def describe(:mav_mount_mode_mavlink_targeting), do: "Load neutral position and start MAVLink Roll,Pitch,Yaw control with stabilization"
  def describe(:mav_mount_mode_rc_targeting), do: "Load neutral position and start RC Roll,Pitch,Yaw control with stabilization"
  def describe(:mav_mount_mode_gps_point), do: "Load neutral position and start to point to Lat,Lon,Alt"
  def describe(:mav_cmd), do: "Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data."
  def describe(:mav_cmd_nav_waypoint), do: "Navigate to MISSION."
  def describe(:mav_cmd_nav_loiter_unlim), do: "Loiter around this MISSION an unlimited amount of time"
  def describe(:mav_cmd_nav_loiter_turns), do: "Loiter around this MISSION for X turns"
  def describe(:mav_cmd_nav_loiter_time), do: "Loiter around this MISSION for X seconds"
  def describe(:mav_cmd_nav_return_to_launch), do: "Return to launch location"
  def describe(:mav_cmd_nav_land), do: "Land at location"
  def describe(:mav_cmd_nav_takeoff), do: "Takeoff from ground / hand"
  def describe(:mav_cmd_nav_land_local), do: "Land at local position (local frame only)"
  def describe(:mav_cmd_nav_takeoff_local), do: "Takeoff from local position (local frame only)"
  def describe(:mav_cmd_nav_follow), do: "Vehicle following, i.e. this waypoint represents the position of a moving vehicle"
  def describe(:mav_cmd_nav_continue_and_change_alt), do: "Continue on the current course and climb/descend to specified altitude. When the altitude is reached continue to the next command (i.e., don't proceed to the next command until the desired altitude is reached."
  def describe(:mav_cmd_nav_loiter_to_alt), do: "Begin loiter at the specified Latitude and Longitude. If Lat=Lon=0, then loiter at the current position. Don't consider the navigation command complete (don't leave loiter) until the altitude has been reached. Additionally, if the Heading Required parameter is non-zero the aircraft will not leave the loiter until heading toward the next waypoint."
  def describe(:mav_cmd_do_follow), do: "Being following a target"
  def describe(:mav_cmd_do_follow_reposition), do: "Reposition the MAV after a follow target command has been sent"
  def describe(:mav_cmd_nav_roi), do: "Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicles control system to control the vehicle attitude and the attitude of various sensors such as cameras."
  def describe(:mav_cmd_nav_pathplanning), do: "Control autonomous path planning on the MAV."
  def describe(:mav_cmd_nav_spline_waypoint), do: "Navigate to MISSION using a spline path."
  def describe(:mav_cmd_nav_vtol_takeoff), do: "Takeoff from ground using VTOL mode"
  def describe(:mav_cmd_nav_vtol_land), do: "Land using VTOL mode"
  def describe(:mav_cmd_nav_guided_enable), do: "hand control over to an external controller"
  def describe(:mav_cmd_nav_delay), do: "Delay the next navigation command a number of seconds or until a specified time"
  def describe(:mav_cmd_nav_payload_place), do: "Descend and place payload. Vehicle descends until it detects a hanging payload has reached the ground, the gripper is opened to release the payload"
  def describe(:mav_cmd_nav_last), do: "NOP - This command is only used to mark the upper limit of the NAV/ACTION commands in the enumeration"
  def describe(:mav_cmd_condition_delay), do: "Delay mission state machine."
  def describe(:mav_cmd_condition_change_alt), do: "Ascend/descend at rate. Delay mission state machine until desired altitude reached."
  def describe(:mav_cmd_condition_distance), do: "Delay mission state machine until within desired distance of next NAV point."
  def describe(:mav_cmd_condition_yaw), do: "Reach a certain target angle."
  def describe(:mav_cmd_condition_last), do: "NOP - This command is only used to mark the upper limit of the CONDITION commands in the enumeration"
  def describe(:mav_cmd_do_set_mode), do: "Set system mode."
  def describe(:mav_cmd_do_jump), do: "Jump to the desired command in the mission list. Repeat this action only the specified number of times"
  def describe(:mav_cmd_do_change_speed), do: "Change speed and/or throttle set points."
  def describe(:mav_cmd_do_set_home), do: "Changes the home location either to the current location or a specified location."
  def describe(:mav_cmd_do_set_parameter), do: "Set a system parameter. Caution! Use of this command requires knowledge of the numeric enumeration value of the parameter."
  def describe(:mav_cmd_do_set_relay), do: "Set a relay to a condition."
  def describe(:mav_cmd_do_repeat_relay), do: "Cycle a relay on and off for a desired number of cyles with a desired period."
  def describe(:mav_cmd_do_set_servo), do: "Set a servo to a desired PWM value."
  def describe(:mav_cmd_do_repeat_servo), do: "Cycle a between its nominal setting and a desired PWM for a desired number of cycles with a desired period."
  def describe(:mav_cmd_do_flighttermination), do: "Terminate flight immediately"
  def describe(:mav_cmd_do_change_altitude), do: "Change altitude set point."
  def describe(:mav_cmd_do_land_start), do: "Mission command to perform a landing. This is used as a marker in a mission to tell the autopilot where a sequence of mission items that represents a landing starts. It may also be sent via a COMMAND_LONG to trigger a landing, in which case the nearest (geographically) landing sequence in the mission will be used. The Latitude/Longitude is optional, and may be set to 0 if not needed. If specified then it will be used to help find the closest landing sequence."
  def describe(:mav_cmd_do_rally_land), do: "Mission command to perform a landing from a rally point."
  def describe(:mav_cmd_do_go_around), do: "Mission command to safely abort an autonmous landing."
  def describe(:mav_cmd_do_reposition), do: "Reposition the vehicle to a specific WGS84 global position."
  def describe(:mav_cmd_do_pause_continue), do: "If in a GPS controlled position mode, hold the current position or continue."
  def describe(:mav_cmd_do_set_reverse), do: "Set moving direction to forward or reverse."
  def describe(:mav_cmd_do_control_video), do: "Control onboard camera system."
  def describe(:mav_cmd_do_set_roi), do: "Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicles control system to control the vehicle attitude and the attitude of various sensors such as cameras."
  def describe(:mav_cmd_do_digicam_configure), do: "Mission command to configure an on-board camera controller system."
  def describe(:mav_cmd_do_digicam_control), do: "Mission command to control an on-board camera controller system."
  def describe(:mav_cmd_do_mount_configure), do: "Mission command to configure a camera or antenna mount"
  def describe(:mav_cmd_do_mount_control), do: "Mission command to control a camera or antenna mount"
  def describe(:mav_cmd_do_set_cam_trigg_dist), do: "Mission command to set camera trigger distance for this flight. The camera is trigerred each time this distance is exceeded. This command can also be used to set the shutter integration time for the camera."
  def describe(:mav_cmd_do_fence_enable), do: "Mission command to enable the geofence"
  def describe(:mav_cmd_do_parachute), do: "Mission command to trigger a parachute"
  def describe(:mav_cmd_do_motor_test), do: "Mission command to perform motor test"
  def describe(:mav_cmd_do_inverted_flight), do: "Change to/from inverted flight"
  def describe(:mav_cmd_nav_set_yaw_speed), do: "Sets a desired vehicle turn angle and speed change"
  def describe(:mav_cmd_do_set_cam_trigg_interval), do: "Mission command to set camera trigger interval for this flight. If triggering is enabled, the camera is triggered each time this interval expires. This command can also be used to set the shutter integration time for the camera."
  def describe(:mav_cmd_do_mount_control_quat), do: "Mission command to control a camera or antenna mount, using a quaternion as reference."
  def describe(:mav_cmd_do_guided_master), do: "set id of master controller"
  def describe(:mav_cmd_do_guided_limits), do: "set limits for external control"
  def describe(:mav_cmd_do_engine_control), do: "Control vehicle engine. This is interpreted by the vehicles engine controller to change the target engine state. It is intended for vehicles with internal combustion engines"
  def describe(:mav_cmd_do_last), do: "NOP - This command is only used to mark the upper limit of the DO commands in the enumeration"
  def describe(:mav_cmd_preflight_calibration), do: "Trigger calibration. This command will be only accepted if in pre-flight mode. Except for Temperature Calibration, only one sensor should be set in a single message and all others should be zero."
  def describe(:mav_cmd_preflight_set_sensor_offsets), do: "Set sensor offsets. This command will be only accepted if in pre-flight mode."
  def describe(:mav_cmd_preflight_uavcan), do: "Trigger UAVCAN config. This command will be only accepted if in pre-flight mode."
  def describe(:mav_cmd_preflight_storage), do: "Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode."
  def describe(:mav_cmd_preflight_reboot_shutdown), do: "Request the reboot or shutdown of system components."
  def describe(:mav_cmd_override_goto), do: "Hold / continue the current action"
  def describe(:mav_cmd_mission_start), do: "start running a mission"
  def describe(:mav_cmd_component_arm_disarm), do: "Arms / Disarms a component"
  def describe(:mav_cmd_get_home_position), do: "Request the home position from the vehicle."
  def describe(:mav_cmd_start_rx_pair), do: "Starts receiver pairing"
  def describe(:mav_cmd_get_message_interval), do: "Request the interval between messages for a particular MAVLink message ID"
  def describe(:mav_cmd_set_message_interval), do: "Request the interval between messages for a particular MAVLink message ID. This interface replaces REQUEST_DATA_STREAM"
  def describe(:mav_cmd_request_protocol_version), do: "Request MAVLink protocol version compatibility"
  def describe(:mav_cmd_request_autopilot_capabilities), do: "Request autopilot capabilities"
  def describe(:mav_cmd_request_camera_information), do: "WIP: Request camera information (CAMERA_INFORMATION)"
  def describe(:mav_cmd_request_camera_settings), do: "WIP: Request camera settings (CAMERA_SETTINGS)"
  def describe(:mav_cmd_set_camera_settings_1), do: "WIP: Set the camera settings part 1 (CAMERA_SETTINGS). Use NAN for values you don't want to change."
  def describe(:mav_cmd_set_camera_settings_2), do: "WIP: Set the camera settings part 2 (CAMERA_SETTINGS). Use NAN for values you don't want to change."
  def describe(:mav_cmd_request_storage_information), do: "WIP: Request storage information (STORAGE_INFORMATION)"
  def describe(:mav_cmd_storage_format), do: "WIP: Format a storage medium"
  def describe(:mav_cmd_request_camera_capture_status), do: "WIP: Request camera capture status (CAMERA_CAPTURE_STATUS)"
  def describe(:mav_cmd_request_flight_information), do: "WIP: Request flight information (FLIGHT_INFORMATION)"
  def describe(:mav_cmd_reset_camera_settings), do: "WIP: Reset all camera settings to Factory Default (CAMERA_SETTINGS)"
  def describe(:mav_cmd_set_camera_mode), do: "WIP: Set camera running mode. Use NAN for values you don't want to change."
  def describe(:mav_cmd_image_start_capture), do: "WIP: Start image capture sequence. Sends CAMERA_IMAGE_CAPTURED after each capture."
  def describe(:mav_cmd_image_stop_capture), do: "WIP: Stop image capture sequence"
  def describe(:mav_cmd_request_camera_image_capture), do: "WIP: Re-request a CAMERA_IMAGE_CAPTURE packet"
  def describe(:mav_cmd_do_trigger_control), do: "Enable or disable on-board camera triggering system."
  def describe(:mav_cmd_video_start_capture), do: "WIP: Starts video capture (recording)"
  def describe(:mav_cmd_video_stop_capture), do: "WIP: Stop the current video capture (recording)"
  def describe(:mav_cmd_video_start_streaming), do: "WIP: Start video streaming"
  def describe(:mav_cmd_video_stop_streaming), do: "WIP: Stop the current video streaming"
  def describe(:mav_cmd_request_video_stream_information), do: "WIP: Request video stream information (VIDEO_STREAM_INFORMATION)"
  def describe(:mav_cmd_logging_start), do: "Request to start streaming logging data over MAVLink (see also LOGGING_DATA message)"
  def describe(:mav_cmd_logging_stop), do: "Request to stop streaming log data over MAVLink"
  def describe(:mav_cmd_airframe_configuration), do: ""
  def describe(:mav_cmd_panorama_create), do: "Create a panorama at the current position"
  def describe(:mav_cmd_do_vtol_transition), do: "Request VTOL transition"
  def describe(:mav_cmd_set_guided_submode_standard), do: "This command sets the submode to standard guided when vehicle is in guided mode. The vehicle holds position and altitude and the user can input the desired velocites along all three axes."
  def describe(:mav_cmd_set_guided_submode_circle), do: "This command sets submode circle when vehicle is in guided mode. Vehicle flies along a circle facing the center of the circle. The user can input the velocity along the circle and change the radius. If no input is given the vehicle will hold position."
  def describe(:mav_cmd_nav_fence_return_point), do: "Fence return point. There can only be one fence return point."
  def describe(:mav_cmd_nav_fence_polygon_vertex_inclusion), do: "Fence vertex for an inclusion polygon (the polygon must not be self-intersecting). The vehicle must stay within this area. Minimum of 3 vertices required."
  def describe(:mav_cmd_nav_fence_polygon_vertex_exclusion), do: "Fence vertex for an exclusion polygon (the polygon must not be self-intersecting). The vehicle must stay outside this area. Minimum of 3 vertices required."
  def describe(:mav_cmd_nav_fence_circle_inclusion), do: "Circular fence area. The vehicle must stay inside this area."
  def describe(:mav_cmd_nav_fence_circle_exclusion), do: "Circular fence area. The vehicle must stay outside this area."
  def describe(:mav_cmd_nav_rally_point), do: "Rally point. You can have multiple rally points defined."
  def describe(:mav_cmd_payload_prepare_deploy), do: "Deploy payload on a Lat / Lon / Alt position. This includes the navigation to reach the required release position and velocity."
  def describe(:mav_cmd_payload_control_deploy), do: "Control the payload deployment."
  def describe(:mav_cmd_waypoint_user_1), do: "User defined waypoint item. Ground Station will show the Vehicle as flying through this item."
  def describe(:mav_cmd_waypoint_user_2), do: "User defined waypoint item. Ground Station will show the Vehicle as flying through this item."
  def describe(:mav_cmd_waypoint_user_3), do: "User defined waypoint item. Ground Station will show the Vehicle as flying through this item."
  def describe(:mav_cmd_waypoint_user_4), do: "User defined waypoint item. Ground Station will show the Vehicle as flying through this item."
  def describe(:mav_cmd_waypoint_user_5), do: "User defined waypoint item. Ground Station will show the Vehicle as flying through this item."
  def describe(:mav_cmd_spatial_user_1), do: "User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item."
  def describe(:mav_cmd_spatial_user_2), do: "User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item."
  def describe(:mav_cmd_spatial_user_3), do: "User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item."
  def describe(:mav_cmd_spatial_user_4), do: "User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item."
  def describe(:mav_cmd_spatial_user_5), do: "User defined spatial item. Ground Station will not show the Vehicle as flying through this item. Example: ROI item."
  def describe(:mav_cmd_user_1), do: "User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item."
  def describe(:mav_cmd_user_2), do: "User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item."
  def describe(:mav_cmd_user_3), do: "User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item."
  def describe(:mav_cmd_user_4), do: "User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item."
  def describe(:mav_cmd_user_5), do: "User defined command. Ground Station will not show the Vehicle as flying through this item. Example: MAV_CMD_DO_SET_PARAMETER item."
  def describe(:mav_data_stream), do: "THIS INTERFACE IS DEPRECATED AS OF JULY 2015. Please use MESSAGE_INTERVAL instead. A data stream is not a fixed set of messages, but rather a recommendation to the autopilot software. Individual autopilots may or may not obey the recommended messages."
  def describe(:mav_data_stream_all), do: "Enable all data streams"
  def describe(:mav_data_stream_raw_sensors), do: "Enable IMU_RAW, GPS_RAW, GPS_STATUS packets."
  def describe(:mav_data_stream_extended_status), do: "Enable GPS_STATUS, CONTROL_STATUS, AUX_STATUS"
  def describe(:mav_data_stream_rc_channels), do: "Enable RC_CHANNELS_SCALED, RC_CHANNELS_RAW, SERVO_OUTPUT_RAW"
  def describe(:mav_data_stream_raw_controller), do: "Enable ATTITUDE_CONTROLLER_OUTPUT, POSITION_CONTROLLER_OUTPUT, NAV_CONTROLLER_OUTPUT."
  def describe(:mav_data_stream_position), do: "Enable LOCAL_POSITION, GLOBAL_POSITION/GLOBAL_POSITION_INT messages."
  def describe(:mav_data_stream_extra1), do: "Dependent on the autopilot"
  def describe(:mav_data_stream_extra2), do: "Dependent on the autopilot"
  def describe(:mav_data_stream_extra3), do: "Dependent on the autopilot"
  def describe(:mav_roi), do: "The ROI (region of interest) for the vehicle. This can be be used by the vehicle for camera/vehicle attitude alignment (see MAV_CMD_NAV_ROI)."
  def describe(:mav_roi_none), do: "No region of interest."
  def describe(:mav_roi_wpnext), do: "Point toward next MISSION."
  def describe(:mav_roi_wpindex), do: "Point toward given MISSION."
  def describe(:mav_roi_location), do: "Point toward fixed location."
  def describe(:mav_roi_target), do: "Point toward of given id."
  def describe(:mav_cmd_ack), do: "ACK / NACK / ERROR values as a result of MAV_CMDs and for mission item transmission."
  def describe(:mav_cmd_ack_ok), do: "Command / mission item is ok."
  def describe(:mav_cmd_ack_err_fail), do: "Generic error message if none of the other reasons fails or if no detailed error reporting is implemented."
  def describe(:mav_cmd_ack_err_access_denied), do: "The system is refusing to accept this command from this source / communication partner."
  def describe(:mav_cmd_ack_err_not_supported), do: "Command or mission item is not supported, other commands would be accepted."
  def describe(:mav_cmd_ack_err_coordinate_frame_not_supported), do: "The coordinate frame of this command / mission item is not supported."
  def describe(:mav_cmd_ack_err_coordinates_out_of_range), do: "The coordinate frame of this command is ok, but he coordinate values exceed the safety limits of this system. This is a generic error, please use the more specific error messages below if possible."
  def describe(:mav_cmd_ack_err_x_lat_out_of_range), do: "The X or latitude value is out of range."
  def describe(:mav_cmd_ack_err_y_lon_out_of_range), do: "The Y or longitude value is out of range."
  def describe(:mav_cmd_ack_err_z_alt_out_of_range), do: "The Z or altitude value is out of range."
  def describe(:mav_param_type), do: "Specifies the datatype of a MAVLink parameter."
  def describe(:mav_param_type_uint8), do: "8-bit unsigned integer"
  def describe(:mav_param_type_int8), do: "8-bit signed integer"
  def describe(:mav_param_type_uint16), do: "16-bit unsigned integer"
  def describe(:mav_param_type_int16), do: "16-bit signed integer"
  def describe(:mav_param_type_uint32), do: "32-bit unsigned integer"
  def describe(:mav_param_type_int32), do: "32-bit signed integer"
  def describe(:mav_param_type_uint64), do: "64-bit unsigned integer"
  def describe(:mav_param_type_int64), do: "64-bit signed integer"
  def describe(:mav_param_type_real32), do: "32-bit floating-point"
  def describe(:mav_param_type_real64), do: "64-bit floating-point"
  def describe(:mav_result), do: "result from a mavlink command"
  def describe(:mav_result_accepted), do: "Command ACCEPTED and EXECUTED"
  def describe(:mav_result_temporarily_rejected), do: "Command TEMPORARY REJECTED/DENIED"
  def describe(:mav_result_denied), do: "Command PERMANENTLY DENIED"
  def describe(:mav_result_unsupported), do: "Command UNKNOWN/UNSUPPORTED"
  def describe(:mav_result_failed), do: "Command executed, but failed"
  def describe(:mav_result_in_progress), do: "WIP: Command being executed"
  def describe(:mav_mission_result), do: "result in a mavlink mission ack"
  def describe(:mav_mission_accepted), do: "mission accepted OK"
  def describe(:mav_mission_error), do: "generic error / not accepting mission commands at all right now"
  def describe(:mav_mission_unsupported_frame), do: "coordinate frame is not supported"
  def describe(:mav_mission_unsupported), do: "command is not supported"
  def describe(:mav_mission_no_space), do: "mission item exceeds storage space"
  def describe(:mav_mission_invalid), do: "one of the parameters has an invalid value"
  def describe(:mav_mission_invalid_param1), do: "param1 has an invalid value"
  def describe(:mav_mission_invalid_param2), do: "param2 has an invalid value"
  def describe(:mav_mission_invalid_param3), do: "param3 has an invalid value"
  def describe(:mav_mission_invalid_param4), do: "param4 has an invalid value"
  def describe(:mav_mission_invalid_param5_x), do: "x/param5 has an invalid value"
  def describe(:mav_mission_invalid_param6_y), do: "y/param6 has an invalid value"
  def describe(:mav_mission_invalid_param7), do: "param7 has an invalid value"
  def describe(:mav_mission_invalid_sequence), do: "received waypoint out of sequence"
  def describe(:mav_mission_denied), do: "not accepting any mission commands from this communication partner"
  def describe(:mav_severity), do: "Indicates the severity level, generally used for status messages to indicate their relative urgency. Based on RFC-5424 using expanded definitions at: http://www.kiwisyslog.com/kb/info:-syslog-message-levels/."
  def describe(:mav_severity_emergency), do: "System is unusable. This is a \"panic\" condition."
  def describe(:mav_severity_alert), do: "Action should be taken immediately. Indicates error in non-critical systems."
  def describe(:mav_severity_critical), do: "Action must be taken immediately. Indicates failure in a primary system."
  def describe(:mav_severity_error), do: "Indicates an error in secondary/redundant systems."
  def describe(:mav_severity_warning), do: "Indicates about a possible future error if this is not resolved within a given timeframe. Example would be a low battery warning."
  def describe(:mav_severity_notice), do: "An unusual event has occured, though not an error condition. This should be investigated for the root cause."
  def describe(:mav_severity_info), do: "Normal operational messages. Useful for logging. No action is required for these messages."
  def describe(:mav_severity_debug), do: "Useful non-operational messages that can assist in debugging. These should not occur during normal operation."
  def describe(:mav_power_status), do: "Power supply status flags (bitmask)"
  def describe(:mav_power_status_brick_valid), do: "main brick power supply valid"
  def describe(:mav_power_status_servo_valid), do: "main servo power supply valid for FMU"
  def describe(:mav_power_status_usb_connected), do: "USB power is connected"
  def describe(:mav_power_status_periph_overcurrent), do: "peripheral supply is in over-current state"
  def describe(:mav_power_status_periph_hipower_overcurrent), do: "hi-power peripheral supply is in over-current state"
  def describe(:mav_power_status_changed), do: "Power status has changed since boot"
  def describe(:serial_control_dev), do: "SERIAL_CONTROL device types"
  def describe(:serial_control_dev_telem1), do: "First telemetry port"
  def describe(:serial_control_dev_telem2), do: "Second telemetry port"
  def describe(:serial_control_dev_gps1), do: "First GPS port"
  def describe(:serial_control_dev_gps2), do: "Second GPS port"
  def describe(:serial_control_dev_shell), do: "system shell"
  def describe(:serial_control_flag), do: "SERIAL_CONTROL flags (bitmask)"
  def describe(:serial_control_flag_reply), do: "Set if this is a reply"
  def describe(:serial_control_flag_respond), do: "Set if the sender wants the receiver to send a response as another SERIAL_CONTROL message"
  def describe(:serial_control_flag_exclusive), do: "Set if access to the serial port should be removed from whatever driver is currently using it, giving exclusive access to the SERIAL_CONTROL protocol. The port can be handed back by sending a request without this flag set"
  def describe(:serial_control_flag_blocking), do: "Block on writes to the serial port"
  def describe(:serial_control_flag_multi), do: "Send multiple replies until port is drained"
  def describe(:mav_distance_sensor), do: "Enumeration of distance sensor types"
  def describe(:mav_distance_sensor_laser), do: "Laser rangefinder, e.g. LightWare SF02/F or PulsedLight units"
  def describe(:mav_distance_sensor_ultrasound), do: "Ultrasound rangefinder, e.g. MaxBotix units"
  def describe(:mav_distance_sensor_infrared), do: "Infrared rangefinder, e.g. Sharp units"
  def describe(:mav_sensor_orientation), do: "Enumeration of sensor orientation, according to its rotations"
  def describe(:mav_sensor_rotation_none), do: "Roll: 0, Pitch: 0, Yaw: 0"
  def describe(:mav_sensor_rotation_yaw_45), do: "Roll: 0, Pitch: 0, Yaw: 45"
  def describe(:mav_sensor_rotation_yaw_90), do: "Roll: 0, Pitch: 0, Yaw: 90"
  def describe(:mav_sensor_rotation_yaw_135), do: "Roll: 0, Pitch: 0, Yaw: 135"
  def describe(:mav_sensor_rotation_yaw_180), do: "Roll: 0, Pitch: 0, Yaw: 180"
  def describe(:mav_sensor_rotation_yaw_225), do: "Roll: 0, Pitch: 0, Yaw: 225"
  def describe(:mav_sensor_rotation_yaw_270), do: "Roll: 0, Pitch: 0, Yaw: 270"
  def describe(:mav_sensor_rotation_yaw_315), do: "Roll: 0, Pitch: 0, Yaw: 315"
  def describe(:mav_sensor_rotation_roll_180), do: "Roll: 180, Pitch: 0, Yaw: 0"
  def describe(:mav_sensor_rotation_roll_180_yaw_45), do: "Roll: 180, Pitch: 0, Yaw: 45"
  def describe(:mav_sensor_rotation_roll_180_yaw_90), do: "Roll: 180, Pitch: 0, Yaw: 90"
  def describe(:mav_sensor_rotation_roll_180_yaw_135), do: "Roll: 180, Pitch: 0, Yaw: 135"
  def describe(:mav_sensor_rotation_pitch_180), do: "Roll: 0, Pitch: 180, Yaw: 0"
  def describe(:mav_sensor_rotation_roll_180_yaw_225), do: "Roll: 180, Pitch: 0, Yaw: 225"
  def describe(:mav_sensor_rotation_roll_180_yaw_270), do: "Roll: 180, Pitch: 0, Yaw: 270"
  def describe(:mav_sensor_rotation_roll_180_yaw_315), do: "Roll: 180, Pitch: 0, Yaw: 315"
  def describe(:mav_sensor_rotation_roll_90), do: "Roll: 90, Pitch: 0, Yaw: 0"
  def describe(:mav_sensor_rotation_roll_90_yaw_45), do: "Roll: 90, Pitch: 0, Yaw: 45"
  def describe(:mav_sensor_rotation_roll_90_yaw_90), do: "Roll: 90, Pitch: 0, Yaw: 90"
  def describe(:mav_sensor_rotation_roll_90_yaw_135), do: "Roll: 90, Pitch: 0, Yaw: 135"
  def describe(:mav_sensor_rotation_roll_270), do: "Roll: 270, Pitch: 0, Yaw: 0"
  def describe(:mav_sensor_rotation_roll_270_yaw_45), do: "Roll: 270, Pitch: 0, Yaw: 45"
  def describe(:mav_sensor_rotation_roll_270_yaw_90), do: "Roll: 270, Pitch: 0, Yaw: 90"
  def describe(:mav_sensor_rotation_roll_270_yaw_135), do: "Roll: 270, Pitch: 0, Yaw: 135"
  def describe(:mav_sensor_rotation_pitch_90), do: "Roll: 0, Pitch: 90, Yaw: 0"
  def describe(:mav_sensor_rotation_pitch_270), do: "Roll: 0, Pitch: 270, Yaw: 0"
  def describe(:mav_sensor_rotation_pitch_180_yaw_90), do: "Roll: 0, Pitch: 180, Yaw: 90"
  def describe(:mav_sensor_rotation_pitch_180_yaw_270), do: "Roll: 0, Pitch: 180, Yaw: 270"
  def describe(:mav_sensor_rotation_roll_90_pitch_90), do: "Roll: 90, Pitch: 90, Yaw: 0"
  def describe(:mav_sensor_rotation_roll_180_pitch_90), do: "Roll: 180, Pitch: 90, Yaw: 0"
  def describe(:mav_sensor_rotation_roll_270_pitch_90), do: "Roll: 270, Pitch: 90, Yaw: 0"
  def describe(:mav_sensor_rotation_roll_90_pitch_180), do: "Roll: 90, Pitch: 180, Yaw: 0"
  def describe(:mav_sensor_rotation_roll_270_pitch_180), do: "Roll: 270, Pitch: 180, Yaw: 0"
  def describe(:mav_sensor_rotation_roll_90_pitch_270), do: "Roll: 90, Pitch: 270, Yaw: 0"
  def describe(:mav_sensor_rotation_roll_180_pitch_270), do: "Roll: 180, Pitch: 270, Yaw: 0"
  def describe(:mav_sensor_rotation_roll_270_pitch_270), do: "Roll: 270, Pitch: 270, Yaw: 0"
  def describe(:mav_sensor_rotation_roll_90_pitch_180_yaw_90), do: "Roll: 90, Pitch: 180, Yaw: 90"
  def describe(:mav_sensor_rotation_roll_90_yaw_270), do: "Roll: 90, Pitch: 0, Yaw: 270"
  def describe(:mav_sensor_rotation_roll_315_pitch_315_yaw_315), do: "Roll: 315, Pitch: 315, Yaw: 315"
  def describe(:mav_protocol_capability), do: "Bitmask of (optional) autopilot capabilities (64 bit). If a bit is set, the autopilot supports this capability."
  def describe(:mav_protocol_capability_mission_float), do: "Autopilot supports MISSION float message type."
  def describe(:mav_protocol_capability_param_float), do: "Autopilot supports the new param float message type."
  def describe(:mav_protocol_capability_mission_int), do: "Autopilot supports MISSION_INT scaled integer message type."
  def describe(:mav_protocol_capability_command_int), do: "Autopilot supports COMMAND_INT scaled integer message type."
  def describe(:mav_protocol_capability_param_union), do: "Autopilot supports the new param union message type."
  def describe(:mav_protocol_capability_ftp), do: "Autopilot supports the new FILE_TRANSFER_PROTOCOL message type."
  def describe(:mav_protocol_capability_set_attitude_target), do: "Autopilot supports commanding attitude offboard."
  def describe(:mav_protocol_capability_set_position_target_local_ned), do: "Autopilot supports commanding position and velocity targets in local NED frame."
  def describe(:mav_protocol_capability_set_position_target_global_int), do: "Autopilot supports commanding position and velocity targets in global scaled integers."
  def describe(:mav_protocol_capability_terrain), do: "Autopilot supports terrain protocol / data handling."
  def describe(:mav_protocol_capability_set_actuator_target), do: "Autopilot supports direct actuator control."
  def describe(:mav_protocol_capability_flight_termination), do: "Autopilot supports the flight termination command."
  def describe(:mav_protocol_capability_compass_calibration), do: "Autopilot supports onboard compass calibration."
  def describe(:mav_protocol_capability_mavlink2), do: "Autopilot supports mavlink version 2."
  def describe(:mav_protocol_capability_mission_fence), do: "Autopilot supports mission fence protocol."
  def describe(:mav_protocol_capability_mission_rally), do: "Autopilot supports mission rally point protocol."
  def describe(:mav_protocol_capability_flight_information), do: "Autopilot supports the flight information protocol."
  def describe(:mav_mission_type), do: "Type of mission items being requested/sent in mission protocol."
  def describe(:mav_mission_type_mission), do: "Items are mission commands for main mission."
  def describe(:mav_mission_type_fence), do: "Specifies GeoFence area(s). Items are MAV_CMD_FENCE_ GeoFence items."
  def describe(:mav_mission_type_rally), do: "Specifies the rally points for the vehicle. Rally points are alternative RTL points. Items are MAV_CMD_RALLY_POINT rally point items."
  def describe(:mav_mission_type_all), do: "Only used in MISSION_CLEAR_ALL to clear all mission types."
  def describe(:mav_estimator_type), do: "Enumeration of estimator types"
  def describe(:mav_estimator_type_naive), do: "This is a naive estimator without any real covariance feedback."
  def describe(:mav_estimator_type_vision), do: "Computer vision based estimate. Might be up to scale."
  def describe(:mav_estimator_type_vio), do: "Visual-inertial estimate."
  def describe(:mav_estimator_type_gps), do: "Plain GPS estimate."
  def describe(:mav_estimator_type_gps_ins), do: "Estimator integrating GPS and inertial sensing."
  def describe(:mav_battery_type), do: "Enumeration of battery types"
  def describe(:mav_battery_type_unknown), do: "Not specified."
  def describe(:mav_battery_type_lipo), do: "Lithium polymer battery"
  def describe(:mav_battery_type_life), do: "Lithium-iron-phosphate battery"
  def describe(:mav_battery_type_lion), do: "Lithium-ION battery"
  def describe(:mav_battery_type_nimh), do: "Nickel metal hydride battery"
  def describe(:mav_battery_function), do: "Enumeration of battery functions"
  def describe(:mav_battery_function_unknown), do: "Battery function is unknown"
  def describe(:mav_battery_function_all), do: "Battery supports all flight systems"
  def describe(:mav_battery_function_propulsion), do: "Battery for the propulsion system"
  def describe(:mav_battery_function_avionics), do: "Avionics battery"
  def describe(:mav_battery_type_payload), do: "Payload battery"
  def describe(:mav_vtol_state), do: "Enumeration of VTOL states"
  def describe(:mav_vtol_state_undefined), do: "MAV is not configured as VTOL"
  def describe(:mav_vtol_state_transition_to_fw), do: "VTOL is in transition from multicopter to fixed-wing"
  def describe(:mav_vtol_state_transition_to_mc), do: "VTOL is in transition from fixed-wing to multicopter"
  def describe(:mav_vtol_state_mc), do: "VTOL is in multicopter state"
  def describe(:mav_vtol_state_fw), do: "VTOL is in fixed-wing state"
  def describe(:mav_landed_state), do: "Enumeration of landed detector states"
  def describe(:mav_landed_state_undefined), do: "MAV landed state is unknown"
  def describe(:mav_landed_state_on_ground), do: "MAV is landed (on ground)"
  def describe(:mav_landed_state_in_air), do: "MAV is in air"
  def describe(:mav_landed_state_takeoff), do: "MAV currently taking off"
  def describe(:mav_landed_state_landing), do: "MAV currently landing"
  def describe(:adsb_altitude_type), do: "Enumeration of the ADSB altimeter types"
  def describe(:adsb_altitude_type_pressure_qnh), do: "Altitude reported from a Baro source using QNH reference"
  def describe(:adsb_altitude_type_geometric), do: "Altitude reported from a GNSS source"
  def describe(:adsb_emitter_type), do: "ADSB classification for the type of vehicle emitting the transponder signal"
  def describe(:adsb_emitter_type_no_info), do: ""
  def describe(:adsb_emitter_type_light), do: ""
  def describe(:adsb_emitter_type_small), do: ""
  def describe(:adsb_emitter_type_large), do: ""
  def describe(:adsb_emitter_type_high_vortex_large), do: ""
  def describe(:adsb_emitter_type_heavy), do: ""
  def describe(:adsb_emitter_type_highly_manuv), do: ""
  def describe(:adsb_emitter_type_rotocraft), do: ""
  def describe(:adsb_emitter_type_unassigned), do: ""
  def describe(:adsb_emitter_type_glider), do: ""
  def describe(:adsb_emitter_type_lighter_air), do: ""
  def describe(:adsb_emitter_type_parachute), do: ""
  def describe(:adsb_emitter_type_ultra_light), do: ""
  def describe(:adsb_emitter_type_unassigned2), do: ""
  def describe(:adsb_emitter_type_uav), do: ""
  def describe(:adsb_emitter_type_space), do: ""
  def describe(:adsb_emitter_type_unassgined3), do: ""
  def describe(:adsb_emitter_type_emergency_surface), do: ""
  def describe(:adsb_emitter_type_service_surface), do: ""
  def describe(:adsb_emitter_type_point_obstacle), do: ""
  def describe(:adsb_flags), do: "These flags indicate status such as data validity of each data source. Set = data valid"
  def describe(:adsb_flags_valid_coords), do: ""
  def describe(:adsb_flags_valid_altitude), do: ""
  def describe(:adsb_flags_valid_heading), do: ""
  def describe(:adsb_flags_valid_velocity), do: ""
  def describe(:adsb_flags_valid_callsign), do: ""
  def describe(:adsb_flags_valid_squawk), do: ""
  def describe(:adsb_flags_simulated), do: ""
  def describe(:mav_do_reposition_flags), do: "Bitmask of options for the MAV_CMD_DO_REPOSITION"
  def describe(:mav_do_reposition_flags_change_mode), do: "The aircraft should immediately transition into guided. This should not be set for follow me applications"
  def describe(:estimator_status_flags), do: "Flags in EKF_STATUS message"
  def describe(:estimator_attitude), do: "True if the attitude estimate is good"
  def describe(:estimator_velocity_horiz), do: "True if the horizontal velocity estimate is good"
  def describe(:estimator_velocity_vert), do: "True if the vertical velocity estimate is good"
  def describe(:estimator_pos_horiz_rel), do: "True if the horizontal position (relative) estimate is good"
  def describe(:estimator_pos_horiz_abs), do: "True if the horizontal position (absolute) estimate is good"
  def describe(:estimator_pos_vert_abs), do: "True if the vertical position (absolute) estimate is good"
  def describe(:estimator_pos_vert_agl), do: "True if the vertical position (above ground) estimate is good"
  def describe(:estimator_const_pos_mode), do: "True if the EKF is in a constant position mode and is not using external measurements (eg GPS or optical flow)"
  def describe(:estimator_pred_pos_horiz_rel), do: "True if the EKF has sufficient data to enter a mode that will provide a (relative) position estimate"
  def describe(:estimator_pred_pos_horiz_abs), do: "True if the EKF has sufficient data to enter a mode that will provide a (absolute) position estimate"
  def describe(:estimator_gps_glitch), do: "True if the EKF has detected a GPS glitch"
  def describe(:motor_test_throttle_type), do: ""
  def describe(:motor_test_throttle_percent), do: "throttle as a percentage from 0 ~ 100"
  def describe(:motor_test_throttle_pwm), do: "throttle as an absolute PWM value (normally in range of 1000~2000)"
  def describe(:motor_test_throttle_pilot), do: "throttle pass-through from pilot's transmitter"
  def describe(:gps_input_ignore_flags), do: ""
  def describe(:gps_input_ignore_flag_alt), do: "ignore altitude field"
  def describe(:gps_input_ignore_flag_hdop), do: "ignore hdop field"
  def describe(:gps_input_ignore_flag_vdop), do: "ignore vdop field"
  def describe(:gps_input_ignore_flag_vel_horiz), do: "ignore horizontal velocity field (vn and ve)"
  def describe(:gps_input_ignore_flag_vel_vert), do: "ignore vertical velocity field (vd)"
  def describe(:gps_input_ignore_flag_speed_accuracy), do: "ignore speed accuracy field"
  def describe(:gps_input_ignore_flag_horizontal_accuracy), do: "ignore horizontal accuracy field"
  def describe(:gps_input_ignore_flag_vertical_accuracy), do: "ignore vertical accuracy field"
  def describe(:mav_collision_action), do: "Possible actions an aircraft can take to avoid a collision."
  def describe(:mav_collision_action_none), do: "Ignore any potential collisions"
  def describe(:mav_collision_action_report), do: "Report potential collision"
  def describe(:mav_collision_action_ascend_or_descend), do: "Ascend or Descend to avoid threat"
  def describe(:mav_collision_action_move_horizontally), do: "Move horizontally to avoid threat"
  def describe(:mav_collision_action_move_perpendicular), do: "Aircraft to move perpendicular to the collision's velocity vector"
  def describe(:mav_collision_action_rtl), do: "Aircraft to fly directly back to its launch point"
  def describe(:mav_collision_action_hover), do: "Aircraft to stop in place"
  def describe(:mav_collision_threat_level), do: "Aircraft-rated danger from this threat."
  def describe(:mav_collision_threat_level_none), do: "Not a threat"
  def describe(:mav_collision_threat_level_low), do: "Craft is mildly concerned about this threat"
  def describe(:mav_collision_threat_level_high), do: "Craft is panicing, and may take actions to avoid threat"
  def describe(:mav_collision_src), do: "Source of information about this collision."
  def describe(:mav_collision_src_adsb), do: "ID field references ADSB_VEHICLE packets"
  def describe(:mav_collision_src_mavlink_gps_global_int), do: "ID field references MAVLink SRC ID"
  def describe(:gps_fix_type), do: "Type of GPS fix"
  def describe(:gps_fix_type_no_gps), do: "No GPS connected"
  def describe(:gps_fix_type_no_fix), do: "No position information, GPS is connected"
  def describe(:gps_fix_type_2d_fix), do: "2D position"
  def describe(:gps_fix_type_3d_fix), do: "3D position"
  def describe(:gps_fix_type_dgps), do: "DGPS/SBAS aided 3D position"
  def describe(:gps_fix_type_rtk_float), do: "RTK float, 3D position"
  def describe(:gps_fix_type_rtk_fixed), do: "RTK Fixed, 3D position"
  def describe(:gps_fix_type_static), do: "Static fixed, typically used for base stations"
   
  @doc "Return keyword list of mav_cmd parameters"
  @spec describe_params(mav_cmd) :: param_description_list
  def describe_params(:mav_cmd_nav_waypoint), do: [{1, "Hold time in decimal seconds. (ignored by fixed wing, time to stay at MISSION for rotary wing)"}, {2, "Acceptance radius in meters (if the sphere with this radius is hit, the MISSION counts as reached)"}, {3, ""}, {4, "Desired yaw angle at MISSION (rotary wing). NaN for unchanged."}, {5, "Latitude"}, {6, "Longitude"}, {7, "Altitude"}]
  def describe_params(:mav_cmd_nav_loiter_unlim), do: [{1, "Empty"}, {2, "Empty"}, {3, "Radius around MISSION, in meters. If positive loiter clockwise, else counter-clockwise"}, {4, "Desired yaw angle."}, {5, "Latitude"}, {6, "Longitude"}, {7, "Altitude"}]
  def describe_params(:mav_cmd_nav_loiter_turns), do: [{1, "Turns"}, {2, "Empty"}, {3, "Radius around MISSION, in meters. If positive loiter clockwise, else counter-clockwise"}, {4, "Forward moving aircraft this sets exit xtrack location: 0 for center of loiter wp, 1 for exit location. Else, this is desired yaw angle"}, {5, "Latitude"}, {6, "Longitude"}, {7, "Altitude"}]
  def describe_params(:mav_cmd_nav_loiter_time), do: [{1, "Seconds (decimal)"}, {2, "Empty"}, {3, "Radius around MISSION, in meters. If positive loiter clockwise, else counter-clockwise"}, {4, "Forward moving aircraft this sets exit xtrack location: 0 for center of loiter wp, 1 for exit location. Else, this is desired yaw angle"}, {5, "Latitude"}, {6, "Longitude"}, {7, "Altitude"}]
  def describe_params(:mav_cmd_nav_return_to_launch), do: [{1, "Empty"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_nav_land), do: [{1, "Abort Alt"}, {2, "Empty"}, {3, "Empty"}, {4, "Desired yaw angle. NaN for unchanged."}, {5, "Latitude"}, {6, "Longitude"}, {7, "Altitude"}]
  def describe_params(:mav_cmd_nav_takeoff), do: [{1, "Minimum pitch (if airspeed sensor present), desired pitch without sensor"}, {2, "Empty"}, {3, "Empty"}, {4, "Yaw angle (if magnetometer present), ignored without magnetometer. NaN for unchanged."}, {5, "Latitude"}, {6, "Longitude"}, {7, "Altitude"}]
  def describe_params(:mav_cmd_nav_land_local), do: [{1, "Landing target number (if available)"}, {2, "Maximum accepted offset from desired landing position [m] - computed magnitude from spherical coordinates: d = sqrt(x^2 + y^2 + z^2), which gives the maximum accepted distance between the desired landing position and the position where the vehicle is about to land"}, {3, "Landing descend rate [ms^-1]"}, {4, "Desired yaw angle [rad]"}, {5, "Y-axis position [m]"}, {6, "X-axis position [m]"}, {7, "Z-axis / ground level position [m]"}]
  def describe_params(:mav_cmd_nav_takeoff_local), do: [{1, "Minimum pitch (if airspeed sensor present), desired pitch without sensor [rad]"}, {2, "Empty"}, {3, "Takeoff ascend rate [ms^-1]"}, {4, "Yaw angle [rad] (if magnetometer or another yaw estimation source present), ignored without one of these"}, {5, "Y-axis position [m]"}, {6, "X-axis position [m]"}, {7, "Z-axis position [m]"}]
  def describe_params(:mav_cmd_nav_follow), do: [{1, "Following logic to use (e.g. loitering or sinusoidal following) - depends on specific autopilot implementation"}, {2, "Ground speed of vehicle to be followed"}, {3, "Radius around MISSION, in meters. If positive loiter clockwise, else counter-clockwise"}, {4, "Desired yaw angle."}, {5, "Latitude"}, {6, "Longitude"}, {7, "Altitude"}]
  def describe_params(:mav_cmd_nav_continue_and_change_alt), do: [{1, "Climb or Descend (0 = Neutral, command completes when within 5m of this command's altitude, 1 = Climbing, command completes when at or above this command's altitude, 2 = Descending, command completes when at or below this command's altitude."}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Desired altitude in meters"}]
  def describe_params(:mav_cmd_nav_loiter_to_alt), do: [{1, "Heading Required (0 = False)"}, {2, "Radius in meters. If positive loiter clockwise, negative counter-clockwise, 0 means no change to standard loiter."}, {3, "Empty"}, {4, "Forward moving aircraft this sets exit xtrack location: 0 for center of loiter wp, 1 for exit location"}, {5, "Latitude"}, {6, "Longitude"}, {7, "Altitude"}]
  def describe_params(:mav_cmd_do_follow), do: [{1, "System ID (the system ID of the FOLLOW_TARGET beacon). Send 0 to disable follow-me and return to the default position hold mode"}, {2, "RESERVED"}, {3, "RESERVED"}, {4, "altitude flag: 0: Keep current altitude, 1: keep altitude difference to target, 2: go to a fixed altitude above home"}, {5, "altitude"}, {6, "RESERVED"}, {7, "TTL in seconds in which the MAV should go to the default position hold mode after a message rx timeout"}]
  def describe_params(:mav_cmd_do_follow_reposition), do: [{1, "Camera q1 (where 0 is on the ray from the camera to the tracking device)"}, {2, "Camera q2"}, {3, "Camera q3"}, {4, "Camera q4"}, {5, "altitude offset from target (m)"}, {6, "X offset from target (m)"}, {7, "Y offset from target (m)"}]
  def describe_params(:mav_cmd_nav_roi), do: [{1, "Region of intereset mode. (see MAV_ROI enum)"}, {2, "MISSION index/ target ID. (see MAV_ROI enum)"}, {3, "ROI index (allows a vehicle to manage multiple ROI's)"}, {4, "Empty"}, {5, "x the location of the fixed ROI (see MAV_FRAME)"}, {6, "y"}, {7, "z"}]
  def describe_params(:mav_cmd_nav_pathplanning), do: [{1, "0: Disable local obstacle avoidance / local path planning (without resetting map), 1: Enable local path planning, 2: Enable and reset local path planning"}, {2, "0: Disable full path planning (without resetting map), 1: Enable, 2: Enable and reset map/occupancy grid, 3: Enable and reset planned route, but not occupancy grid"}, {3, "Empty"}, {4, "Yaw angle at goal, in compass degrees, [0..360]"}, {5, "Latitude/X of goal"}, {6, "Longitude/Y of goal"}, {7, "Altitude/Z of goal"}]
  def describe_params(:mav_cmd_nav_spline_waypoint), do: [{1, "Hold time in decimal seconds. (ignored by fixed wing, time to stay at MISSION for rotary wing)"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Latitude/X of goal"}, {6, "Longitude/Y of goal"}, {7, "Altitude/Z of goal"}]
  def describe_params(:mav_cmd_nav_vtol_takeoff), do: [{1, "Empty"}, {2, "Empty"}, {3, "Empty"}, {4, "Yaw angle in degrees. NaN for unchanged."}, {5, "Latitude"}, {6, "Longitude"}, {7, "Altitude"}]
  def describe_params(:mav_cmd_nav_vtol_land), do: [{1, "Empty"}, {2, "Empty"}, {3, "Empty"}, {4, "Yaw angle in degrees. NaN for unchanged."}, {5, "Latitude"}, {6, "Longitude"}, {7, "Altitude"}]
  def describe_params(:mav_cmd_nav_guided_enable), do: [{1, ""}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_nav_delay), do: [{1, "Delay in seconds (decimal, -1 to enable time-of-day fields)"}, {2, "hour (24h format, UTC, -1 to ignore)"}, {3, "minute (24h format, UTC, -1 to ignore)"}, {4, "second (24h format, UTC)"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_nav_payload_place), do: [{1, "Maximum distance to descend (meters)"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Latitude (deg * 1E7)"}, {6, "Longitude (deg * 1E7)"}, {7, "Altitude (meters)"}]
  def describe_params(:mav_cmd_nav_last), do: [{1, "Empty"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_condition_delay), do: [{1, "Delay in seconds (decimal)"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_condition_change_alt), do: [{1, "Descent / Ascend rate (m/s)"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Finish Altitude"}]
  def describe_params(:mav_cmd_condition_distance), do: [{1, "Distance (meters)"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_condition_yaw), do: [{1, "target angle: [0-360], 0 is north"}, {2, "speed during yaw change:[deg per second]"}, {3, "direction: negative: counter clockwise, positive: clockwise [-1,1]"}, {4, "relative offset or absolute angle: [ 1,0]"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_condition_last), do: [{1, "Empty"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_set_mode), do: [{1, "Mode, as defined by ENUM MAV_MODE"}, {2, "Custom mode - this is system specific, please refer to the individual autopilot specifications for details."}, {3, "Custom sub mode - this is system specific, please refer to the individual autopilot specifications for details."}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_jump), do: [{1, "Sequence number"}, {2, "Repeat count"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_change_speed), do: [{1, "Speed type (0=Airspeed, 1=Ground Speed)"}, {2, "Speed (m/s, -1 indicates no change)"}, {3, "Throttle ( Percent, -1 indicates no change)"}, {4, "absolute or relative [0,1]"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_set_home), do: [{1, "Use current (1=use current location, 0=use specified location)"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Latitude"}, {6, "Longitude"}, {7, "Altitude"}]
  def describe_params(:mav_cmd_do_set_parameter), do: [{1, "Parameter number"}, {2, "Parameter value"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_set_relay), do: [{1, "Relay number"}, {2, "Setting (1=on, 0=off, others possible depending on system hardware)"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_repeat_relay), do: [{1, "Relay number"}, {2, "Cycle count"}, {3, "Cycle time (seconds, decimal)"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_set_servo), do: [{1, "Servo number"}, {2, "PWM (microseconds, 1000 to 2000 typical)"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_repeat_servo), do: [{1, "Servo number"}, {2, "PWM (microseconds, 1000 to 2000 typical)"}, {3, "Cycle count"}, {4, "Cycle time (seconds)"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_flighttermination), do: [{1, ""}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_change_altitude), do: [{1, "Altitude in meters"}, {2, "Mav frame of new altitude (see MAV_FRAME)"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_land_start), do: [{1, "Empty"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Latitude"}, {6, "Longitude"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_rally_land), do: [{1, "Break altitude (meters)"}, {2, "Landing speed (m/s)"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_go_around), do: [{1, "Altitude (meters)"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_reposition), do: [{1, "Ground speed, less than 0 (-1) for default"}, {2, "Bitmask of option flags, see the MAV_DO_REPOSITION_FLAGS enum."}, {3, "Reserved"}, {4, "Yaw heading, NaN for unchanged. For planes indicates loiter direction (0: clockwise, 1: counter clockwise)"}, {5, "Latitude (deg * 1E7)"}, {6, "Longitude (deg * 1E7)"}, {7, "Altitude (meters)"}]
  def describe_params(:mav_cmd_do_pause_continue), do: [{1, "0: Pause current mission or reposition command, hold current position. 1: Continue mission. A VTOL capable vehicle should enter hover mode (multicopter and VTOL planes). A plane should loiter with the default loiter radius."}, {2, "Reserved"}, {3, "Reserved"}, {4, "Reserved"}, {5, "Reserved"}, {6, "Reserved"}, {7, "Reserved"}]
  def describe_params(:mav_cmd_do_set_reverse), do: [{1, "Direction (0=Forward, 1=Reverse)"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_control_video), do: [{1, "Camera ID (-1 for all)"}, {2, "Transmission: 0: disabled, 1: enabled compressed, 2: enabled raw"}, {3, ""}, {4, "Recording: 0: disabled, 1: enabled compressed, 2: enabled raw"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_set_roi), do: [{1, "Region of intereset mode. (see MAV_ROI enum)"}, {2, "MISSION index/ target ID. (see MAV_ROI enum)"}, {3, "ROI index (allows a vehicle to manage multiple ROI's)"}, {4, "Empty"}, {5, "x the location of the fixed ROI (see MAV_FRAME)"}, {6, "y"}, {7, "z"}]
  def describe_params(:mav_cmd_do_digicam_configure), do: [{1, "Modes: P, TV, AV, M, Etc"}, {2, "Shutter speed: Divisor number for one second"}, {3, "Aperture: F stop number"}, {4, "ISO number e.g. 80, 100, 200, Etc"}, {5, "Exposure type enumerator"}, {6, "Command Identity"}, {7, "Main engine cut-off time before camera trigger in seconds/10 (0 means no cut-off)"}]
  def describe_params(:mav_cmd_do_digicam_control), do: [{1, "Session control e.g. show/hide lens"}, {2, "Zoom's absolute position"}, {3, "Zooming step value to offset zoom from the current position"}, {4, "Focus Locking, Unlocking or Re-locking"}, {5, "Shooting Command"}, {6, "Command Identity"}, {7, "Test shot identifier. If set to 1, image will only be captured, but not counted towards internal frame count."}]
  def describe_params(:mav_cmd_do_mount_configure), do: [{1, "Mount operation mode (see MAV_MOUNT_MODE enum)"}, {2, "stabilize roll? (1 = yes, 0 = no)"}, {3, "stabilize pitch? (1 = yes, 0 = no)"}, {4, "stabilize yaw? (1 = yes, 0 = no)"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_mount_control), do: [{1, "pitch (WIP: DEPRECATED: or lat in degrees) depending on mount mode."}, {2, "roll (WIP: DEPRECATED: or lon in degrees) depending on mount mode."}, {3, "yaw (WIP: DEPRECATED: or alt in meters) depending on mount mode."}, {4, "WIP: alt in meters depending on mount mode."}, {5, "WIP: latitude in degrees * 1E7, set if appropriate mount mode."}, {6, "WIP: longitude in degrees * 1E7, set if appropriate mount mode."}, {7, "MAV_MOUNT_MODE enum value"}]
  def describe_params(:mav_cmd_do_set_cam_trigg_dist), do: [{1, "Camera trigger distance (meters). -1 or 0 to ignore"}, {2, "Camera shutter integration time (milliseconds). -1 or 0 to ignore"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_fence_enable), do: [{1, "enable? (0=disable, 1=enable, 2=disable_floor_only)"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_parachute), do: [{1, "action (0=disable, 1=enable, 2=release, for some systems see PARACHUTE_ACTION enum, not in general message set.)"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_motor_test), do: [{1, "motor sequence number (a number from 1 to max number of motors on the vehicle)"}, {2, "throttle type (0=throttle percentage, 1=PWM, 2=pilot throttle channel pass-through. See MOTOR_TEST_THROTTLE_TYPE enum)"}, {3, "throttle"}, {4, "timeout (in seconds)"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_inverted_flight), do: [{1, "inverted (0=normal, 1=inverted)"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_nav_set_yaw_speed), do: [{1, "yaw angle to adjust steering by in centidegress"}, {2, "speed - normalized to 0 .. 1"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_set_cam_trigg_interval), do: [{1, "Camera trigger cycle time (milliseconds). -1 or 0 to ignore."}, {2, "Camera shutter integration time (milliseconds). Should be less than trigger cycle time. -1 or 0 to ignore."}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_mount_control_quat), do: [{1, "q1 - quaternion param #1, w (1 in null-rotation)"}, {2, "q2 - quaternion param #2, x (0 in null-rotation)"}, {3, "q3 - quaternion param #3, y (0 in null-rotation)"}, {4, "q4 - quaternion param #4, z (0 in null-rotation)"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_guided_master), do: [{1, "System ID"}, {2, "Component ID"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_guided_limits), do: [{1, "timeout - maximum time (in seconds) that external controller will be allowed to control vehicle. 0 means no timeout"}, {2, "absolute altitude min (in meters, AMSL) - if vehicle moves below this alt, the command will be aborted and the mission will continue. 0 means no lower altitude limit"}, {3, "absolute altitude max (in meters)- if vehicle moves above this alt, the command will be aborted and the mission will continue. 0 means no upper altitude limit"}, {4, "horizontal move limit (in meters, AMSL) - if vehicle moves more than this distance from it's location at the moment the command was executed, the command will be aborted and the mission will continue. 0 means no horizontal altitude limit"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_engine_control), do: [{1, "0: Stop engine, 1:Start Engine"}, {2, "0: Warm start, 1:Cold start. Controls use of choke where applicable"}, {3, "Height delay (meters). This is for commanding engine start only after the vehicle has gained the specified height. Used in VTOL vehicles during takeoff to start engine after the aircraft is off the ground. Zero for no delay."}, {4, "Empty"}, {5, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_do_last), do: [{1, "Empty"}, {2, "Empty"}, {3, "Empty"}, {4, "Empty"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_preflight_calibration), do: [{1, "1: gyro calibration, 3: gyro temperature calibration"}, {2, "1: magnetometer calibration"}, {3, "1: ground pressure calibration"}, {4, "1: radio RC calibration, 2: RC trim calibration"}, {5, "1: accelerometer calibration, 2: board level calibration, 3: accelerometer temperature calibration"}, {6, "1: APM: compass/motor interference calibration (PX4: airspeed calibration, deprecated), 2: airspeed calibration"}, {7, "1: ESC calibration, 3: barometer temperature calibration"}]
  def describe_params(:mav_cmd_preflight_set_sensor_offsets), do: [{1, "Sensor to adjust the offsets for: 0: gyros, 1: accelerometer, 2: magnetometer, 3: barometer, 4: optical flow, 5: second magnetometer, 6: third magnetometer"}, {2, "X axis offset (or generic dimension 1), in the sensor's raw units"}, {3, "Y axis offset (or generic dimension 2), in the sensor's raw units"}, {4, "Z axis offset (or generic dimension 3), in the sensor's raw units"}, {5, "Generic dimension 4, in the sensor's raw units"}, {6, "Generic dimension 5, in the sensor's raw units"}, {7, "Generic dimension 6, in the sensor's raw units"}]
  def describe_params(:mav_cmd_preflight_uavcan), do: [{1, "1: Trigger actuator ID assignment and direction mapping."}, {2, "Reserved"}, {3, "Reserved"}, {4, "Reserved"}, {5, "Reserved"}, {6, "Reserved"}, {7, "Reserved"}]
  def describe_params(:mav_cmd_preflight_storage), do: [{1, "Parameter storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM, 2: Reset to defaults"}, {2, "Mission storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM, 2: Reset to defaults"}, {3, ""}, {4, "Reserved"}, {5, "Empty"}, {6, "Empty"}, {7, "Empty"}]
  def describe_params(:mav_cmd_preflight_reboot_shutdown), do: [{1, "0: Do nothing for autopilot, 1: Reboot autopilot, 2: Shutdown autopilot, 3: Reboot autopilot and keep it in the bootloader until upgraded."}, {2, "0: Do nothing for onboard computer, 1: Reboot onboard computer, 2: Shutdown onboard computer, 3: Reboot onboard computer and keep it in the bootloader until upgraded."}, {3, "WIP: 0: Do nothing for camera, 1: Reboot onboard camera, 2: Shutdown onboard camera, 3: Reboot onboard camera and keep it in the bootloader until upgraded"}, {4, "WIP: 0: Do nothing for mount (e.g. gimbal), 1: Reboot mount, 2: Shutdown mount, 3: Reboot mount and keep it in the bootloader until upgraded"}, {5, "Reserved, send 0"}, {6, "Reserved, send 0"}, {7, "WIP: ID (e.g. camera ID -1 for all IDs)"}]
  def describe_params(:mav_cmd_override_goto), do: [{1, "MAV_GOTO_DO_HOLD: hold MAV_GOTO_DO_CONTINUE: continue with next item in mission plan"}, {2, "MAV_GOTO_HOLD_AT_CURRENT_POSITION: Hold at current position MAV_GOTO_HOLD_AT_SPECIFIED_POSITION: hold at specified position"}, {3, "MAV_FRAME coordinate frame of hold point"}, {4, "Desired yaw angle in degrees"}, {5, "Latitude / X position"}, {6, "Longitude / Y position"}, {7, "Altitude / Z position"}]
  def describe_params(:mav_cmd_mission_start), do: [{1, "first_item: the first mission item to run"}, {2, "last_item: the last mission item to run (after this item is run, the mission ends)"}]
  def describe_params(:mav_cmd_component_arm_disarm), do: [{1, "1 to arm, 0 to disarm"}]
  def describe_params(:mav_cmd_get_home_position), do: [{1, "Reserved"}, {2, "Reserved"}, {3, "Reserved"}, {4, "Reserved"}, {5, "Reserved"}, {6, "Reserved"}, {7, "Reserved"}]
  def describe_params(:mav_cmd_start_rx_pair), do: [{1, "0:Spektrum"}, {2, "0:Spektrum DSM2, 1:Spektrum DSMX"}]
  def describe_params(:mav_cmd_get_message_interval), do: [{1, "The MAVLink message ID"}]
  def describe_params(:mav_cmd_set_message_interval), do: [{1, "The MAVLink message ID"}, {2, "The interval between two messages, in microseconds. Set to -1 to disable and 0 to request default rate."}]
  def describe_params(:mav_cmd_request_protocol_version), do: [{1, "1: Request supported protocol versions by all nodes on the network"}, {2, "Reserved (all remaining params)"}]
  def describe_params(:mav_cmd_request_autopilot_capabilities), do: [{1, "1: Request autopilot version"}, {2, "Reserved (all remaining params)"}]
  def describe_params(:mav_cmd_request_camera_information), do: [{1, "Camera ID (0 for all cameras, 1 for first, 2 for second, etc.)"}, {2, "0: No action 1: Request camera capabilities"}, {3, "Reserved (all remaining params)"}]
  def describe_params(:mav_cmd_request_camera_settings), do: [{1, "Camera ID (0 for all cameras, 1 for first, 2 for second, etc.)"}, {2, "0: No Action 1: Request camera settings"}, {3, "Reserved (all remaining params)"}]
  def describe_params(:mav_cmd_set_camera_settings_1), do: [{1, "Camera ID (1 for first, 2 for second, etc.)"}, {2, "Aperture (1/value)"}, {3, "Shutter speed in seconds"}, {4, "ISO sensitivity"}, {5, "AE mode (Auto Exposure) (0: full auto 1: full manual 2: aperture priority 3: shutter priority)"}, {6, "EV value (when in auto exposure)"}, {7, "White balance (color temperature in K) (0: Auto WB)"}]
  def describe_params(:mav_cmd_set_camera_settings_2), do: [{1, "Camera ID (1 for first, 2 for second, etc.)"}, {2, "Reserved for Flicker mode (0 for Auto)"}, {3, "Reserved for metering mode ID (Average, Center, Spot, etc.)"}, {4, "Reserved for image format ID (Jpeg/Raw/Jpeg+Raw)"}, {5, "Reserved for image quality ID (Compression)"}, {6, "Reserved for color mode ID (Neutral, Vivid, etc.)"}, {7, "Reserved"}]
  def describe_params(:mav_cmd_request_storage_information), do: [{1, "Storage ID (0 for all, 1 for first, 2 for second, etc.)"}, {2, "0: No Action 1: Request storage information"}, {3, "Reserved (all remaining params)"}]
  def describe_params(:mav_cmd_storage_format), do: [{1, "Storage ID (1 for first, 2 for second, etc.)"}, {2, "0: No action 1: Format storage"}, {3, "Reserved (all remaining params)"}]
  def describe_params(:mav_cmd_request_camera_capture_status), do: [{1, "Camera ID (0 for all cameras, 1 for first, 2 for second, etc.)"}, {2, "0: No Action 1: Request camera capture status"}, {3, "Reserved (all remaining params)"}]
  def describe_params(:mav_cmd_request_flight_information), do: [{1, "1: Request flight information"}, {2, "Reserved (all remaining params)"}]
  def describe_params(:mav_cmd_reset_camera_settings), do: [{1, "Camera ID (0 for all cameras, 1 for first, 2 for second, etc.)"}, {2, "0: No Action 1: Reset all settings"}, {3, "Reserved (all remaining params)"}]
  def describe_params(:mav_cmd_set_camera_mode), do: [{1, "Camera ID (0 for all cameras, 1 for first, 2 for second, etc.)"}, {2, "Camera mode (0: photo mode, 1: video mode)"}, {3, "Audio recording enabled (0: off 1: on)"}, {4, "Reserved (all remaining params)"}]
  def describe_params(:mav_cmd_image_start_capture), do: [{1, "Camera ID (0 for all cameras, 1 for first, 2 for second, etc.)"}, {2, "Duration between two consecutive pictures (in seconds)"}, {3, "Number of images to capture total - 0 for unlimited capture"}, {4, "Resolution horizontal in pixels (set to -1 for highest resolution possible)"}, {5, "Resolution vertical in pixels (set to -1 for highest resolution possible)"}]
  def describe_params(:mav_cmd_image_stop_capture), do: [{1, "Camera ID (0 for all cameras, 1 for first, 2 for second, etc.)"}, {2, "Reserved"}]
  def describe_params(:mav_cmd_request_camera_image_capture), do: [{1, "Camera ID (0 for all cameras, 1 for first, 2 for second, etc.)"}, {2, "Sequence number for missing CAMERA_IMAGE_CAPTURE packet"}, {3, "Reserved (all remaining params)"}]
  def describe_params(:mav_cmd_do_trigger_control), do: [{1, "Trigger enable/disable (0 for disable, 1 for start), -1 to ignore"}, {2, "1 to reset the trigger sequence, -1 or 0 to ignore"}, {3, "1 to pause triggering, but without switching the camera off or retracting it. -1 to ignore"}]
  def describe_params(:mav_cmd_video_start_capture), do: [{1, "Camera ID (0 for all cameras, 1 for first, 2 for second, etc.)"}, {2, "Frames per second, set to -1 for highest framerate possible."}, {3, "Resolution horizontal in pixels (set to -1 for highest resolution possible)"}, {4, "Resolution vertical in pixels (set to -1 for highest resolution possible)"}, {5, "Frequency CAMERA_CAPTURE_STATUS messages should be sent while recording (0 for no messages, otherwise time in Hz)"}]
  def describe_params(:mav_cmd_video_stop_capture), do: [{1, "Camera ID (0 for all cameras, 1 for first, 2 for second, etc.)"}, {2, "Reserved"}]
  def describe_params(:mav_cmd_video_start_streaming), do: [{1, "Camera ID (0 for all cameras, 1 for first, 2 for second, etc.)"}, {2, "Reserved"}]
  def describe_params(:mav_cmd_video_stop_streaming), do: [{1, "Camera ID (0 for all cameras, 1 for first, 2 for second, etc.)"}, {2, "Reserved"}]
  def describe_params(:mav_cmd_request_video_stream_information), do: [{1, "Camera ID (0 for all cameras, 1 for first, 2 for second, etc.)"}, {2, "0: No Action 1: Request video stream information"}, {3, "Reserved (all remaining params)"}]
  def describe_params(:mav_cmd_logging_start), do: [{1, "Format: 0: ULog"}, {2, "Reserved (set to 0)"}, {3, "Reserved (set to 0)"}, {4, "Reserved (set to 0)"}, {5, "Reserved (set to 0)"}, {6, "Reserved (set to 0)"}, {7, "Reserved (set to 0)"}]
  def describe_params(:mav_cmd_logging_stop), do: [{1, "Reserved (set to 0)"}, {2, "Reserved (set to 0)"}, {3, "Reserved (set to 0)"}, {4, "Reserved (set to 0)"}, {5, "Reserved (set to 0)"}, {6, "Reserved (set to 0)"}, {7, "Reserved (set to 0)"}]
  def describe_params(:mav_cmd_airframe_configuration), do: [{1, "Landing gear ID (default: 0, -1 for all)"}, {2, "Landing gear position (Down: 0, Up: 1, NAN for no change)"}, {3, "Reserved, set to NAN"}, {4, "Reserved, set to NAN"}, {5, "Reserved, set to NAN"}, {6, "Reserved, set to NAN"}, {7, "Reserved, set to NAN"}]
  def describe_params(:mav_cmd_panorama_create), do: [{1, "Viewing angle horizontal of the panorama (in degrees, +- 0.5 the total angle)"}, {2, "Viewing angle vertical of panorama (in degrees)"}, {3, "Speed of the horizontal rotation (in degrees per second)"}, {4, "Speed of the vertical rotation (in degrees per second)"}]
  def describe_params(:mav_cmd_do_vtol_transition), do: [{1, "The target VTOL state, as defined by ENUM MAV_VTOL_STATE. Only MAV_VTOL_STATE_MC and MAV_VTOL_STATE_FW can be used."}]
  
  def describe_params(:mav_cmd_set_guided_submode_circle), do: [{1, "Radius of desired circle in CIRCLE_MODE"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "Unscaled target latitude of center of circle in CIRCLE_MODE"}, {6, "Unscaled target longitude of center of circle in CIRCLE_MODE"}]
  def describe_params(:mav_cmd_nav_fence_return_point), do: [{1, "Reserved"}, {2, "Reserved"}, {3, "Reserved"}, {4, "Reserved"}, {5, "Latitude"}, {6, "Longitude"}, {7, "Altitude"}]
  def describe_params(:mav_cmd_nav_fence_polygon_vertex_inclusion), do: [{1, "Polygon vertex count"}, {2, "Reserved"}, {3, "Reserved"}, {4, "Reserved"}, {5, "Latitude"}, {6, "Longitude"}, {7, "Reserved"}]
  def describe_params(:mav_cmd_nav_fence_polygon_vertex_exclusion), do: [{1, "Polygon vertex count"}, {2, "Reserved"}, {3, "Reserved"}, {4, "Reserved"}, {5, "Latitude"}, {6, "Longitude"}, {7, "Reserved"}]
  def describe_params(:mav_cmd_nav_fence_circle_inclusion), do: [{1, "radius in meters"}, {2, "Reserved"}, {3, "Reserved"}, {4, "Reserved"}, {5, "Latitude"}, {6, "Longitude"}, {7, "Reserved"}]
  def describe_params(:mav_cmd_nav_fence_circle_exclusion), do: [{1, "radius in meters"}, {2, "Reserved"}, {3, "Reserved"}, {4, "Reserved"}, {5, "Latitude"}, {6, "Longitude"}, {7, "Reserved"}]
  def describe_params(:mav_cmd_nav_rally_point), do: [{1, "Reserved"}, {2, "Reserved"}, {3, "Reserved"}, {4, "Reserved"}, {5, "Latitude"}, {6, "Longitude"}, {7, "Altitude"}]
  def describe_params(:mav_cmd_payload_prepare_deploy), do: [{1, "Operation mode. 0: prepare single payload deploy (overwriting previous requests), but do not execute it. 1: execute payload deploy immediately (rejecting further deploy commands during execution, but allowing abort). 2: add payload deploy to existing deployment list."}, {2, "Desired approach vector in degrees compass heading (0..360). A negative value indicates the system can define the approach vector at will."}, {3, "Desired ground speed at release time. This can be overriden by the airframe in case it needs to meet minimum airspeed. A negative value indicates the system can define the ground speed at will."}, {4, "Minimum altitude clearance to the release position in meters. A negative value indicates the system can define the clearance at will."}, {5, "Latitude unscaled for MISSION_ITEM or in 1e7 degrees for MISSION_ITEM_INT"}, {6, "Longitude unscaled for MISSION_ITEM or in 1e7 degrees for MISSION_ITEM_INT"}, {7, "Altitude, in meters AMSL"}]
  def describe_params(:mav_cmd_payload_control_deploy), do: [{1, "Operation mode. 0: Abort deployment, continue normal mission. 1: switch to payload deploment mode. 100: delete first payload deployment request. 101: delete all payload deployment requests."}, {2, "Reserved"}, {3, "Reserved"}, {4, "Reserved"}, {5, "Reserved"}, {6, "Reserved"}, {7, "Reserved"}]
  def describe_params(:mav_cmd_waypoint_user_1), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "Latitude unscaled"}, {6, "Longitude unscaled"}, {7, "Altitude, in meters AMSL"}]
  def describe_params(:mav_cmd_waypoint_user_2), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "Latitude unscaled"}, {6, "Longitude unscaled"}, {7, "Altitude, in meters AMSL"}]
  def describe_params(:mav_cmd_waypoint_user_3), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "Latitude unscaled"}, {6, "Longitude unscaled"}, {7, "Altitude, in meters AMSL"}]
  def describe_params(:mav_cmd_waypoint_user_4), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "Latitude unscaled"}, {6, "Longitude unscaled"}, {7, "Altitude, in meters AMSL"}]
  def describe_params(:mav_cmd_waypoint_user_5), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "Latitude unscaled"}, {6, "Longitude unscaled"}, {7, "Altitude, in meters AMSL"}]
  def describe_params(:mav_cmd_spatial_user_1), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "Latitude unscaled"}, {6, "Longitude unscaled"}, {7, "Altitude, in meters AMSL"}]
  def describe_params(:mav_cmd_spatial_user_2), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "Latitude unscaled"}, {6, "Longitude unscaled"}, {7, "Altitude, in meters AMSL"}]
  def describe_params(:mav_cmd_spatial_user_3), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "Latitude unscaled"}, {6, "Longitude unscaled"}, {7, "Altitude, in meters AMSL"}]
  def describe_params(:mav_cmd_spatial_user_4), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "Latitude unscaled"}, {6, "Longitude unscaled"}, {7, "Altitude, in meters AMSL"}]
  def describe_params(:mav_cmd_spatial_user_5), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "Latitude unscaled"}, {6, "Longitude unscaled"}, {7, "Altitude, in meters AMSL"}]
  def describe_params(:mav_cmd_user_1), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "User defined"}, {6, "User defined"}, {7, "User defined"}]
  def describe_params(:mav_cmd_user_2), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "User defined"}, {6, "User defined"}, {7, "User defined"}]
  def describe_params(:mav_cmd_user_3), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "User defined"}, {6, "User defined"}, {7, "User defined"}]
  def describe_params(:mav_cmd_user_4), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "User defined"}, {6, "User defined"}, {7, "User defined"}]
  def describe_params(:mav_cmd_user_5), do: [{1, "User defined"}, {2, "User defined"}, {3, "User defined"}, {4, "User defined"}, {5, "User defined"}, {6, "User defined"}, {7, "User defined"}]
   
  @doc "Return encoded integer value used in a Mavlink message for an enumeration value"
  @spec encode(enum_value) :: integer
  def encode(:mav_autopilot_generic), do: 0
  def encode(:mav_autopilot_reserved), do: 1
  def encode(:mav_autopilot_slugs), do: 2
  def encode(:mav_autopilot_ardupilotmega), do: 3
  def encode(:mav_autopilot_openpilot), do: 4
  def encode(:mav_autopilot_generic_waypoints_only), do: 5
  def encode(:mav_autopilot_generic_waypoints_and_simple_navigation_only), do: 6
  def encode(:mav_autopilot_generic_mission_full), do: 7
  def encode(:mav_autopilot_invalid), do: 8
  def encode(:mav_autopilot_ppz), do: 9
  def encode(:mav_autopilot_udb), do: 10
  def encode(:mav_autopilot_fp), do: 11
  def encode(:mav_autopilot_px4), do: 12
  def encode(:mav_autopilot_smaccmpilot), do: 13
  def encode(:mav_autopilot_autoquad), do: 14
  def encode(:mav_autopilot_armazila), do: 15
  def encode(:mav_autopilot_aerob), do: 16
  def encode(:mav_autopilot_asluav), do: 17
  def encode(:mav_autopilot_smartap), do: 18
  def encode(:mav_type_generic), do: 0
  def encode(:mav_type_fixed_wing), do: 1
  def encode(:mav_type_quadrotor), do: 2
  def encode(:mav_type_coaxial), do: 3
  def encode(:mav_type_helicopter), do: 4
  def encode(:mav_type_antenna_tracker), do: 5
  def encode(:mav_type_gcs), do: 6
  def encode(:mav_type_airship), do: 7
  def encode(:mav_type_free_balloon), do: 8
  def encode(:mav_type_rocket), do: 9
  def encode(:mav_type_ground_rover), do: 10
  def encode(:mav_type_surface_boat), do: 11
  def encode(:mav_type_submarine), do: 12
  def encode(:mav_type_hexarotor), do: 13
  def encode(:mav_type_octorotor), do: 14
  def encode(:mav_type_tricopter), do: 15
  def encode(:mav_type_flapping_wing), do: 16
  def encode(:mav_type_kite), do: 17
  def encode(:mav_type_onboard_controller), do: 18
  def encode(:mav_type_vtol_duorotor), do: 19
  def encode(:mav_type_vtol_quadrotor), do: 20
  def encode(:mav_type_vtol_tiltrotor), do: 21
  def encode(:mav_type_vtol_reserved2), do: 22
  def encode(:mav_type_vtol_reserved3), do: 23
  def encode(:mav_type_vtol_reserved4), do: 24
  def encode(:mav_type_vtol_reserved5), do: 25
  def encode(:mav_type_gimbal), do: 26
  def encode(:mav_type_adsb), do: 27
  def encode(:firmware_version_type_dev), do: 0
  def encode(:firmware_version_type_alpha), do: 64
  def encode(:firmware_version_type_beta), do: 128
  def encode(:firmware_version_type_rc), do: 192
  def encode(:firmware_version_type_official), do: 255
  def encode(:mav_mode_flag_safety_armed), do: 128
  def encode(:mav_mode_flag_manual_input_enabled), do: 64
  def encode(:mav_mode_flag_hil_enabled), do: 32
  def encode(:mav_mode_flag_stabilize_enabled), do: 16
  def encode(:mav_mode_flag_guided_enabled), do: 8
  def encode(:mav_mode_flag_auto_enabled), do: 4
  def encode(:mav_mode_flag_test_enabled), do: 2
  def encode(:mav_mode_flag_custom_mode_enabled), do: 1
  def encode(:mav_mode_flag_decode_position_safety), do: 128
  def encode(:mav_mode_flag_decode_position_manual), do: 64
  def encode(:mav_mode_flag_decode_position_hil), do: 32
  def encode(:mav_mode_flag_decode_position_stabilize), do: 16
  def encode(:mav_mode_flag_decode_position_guided), do: 8
  def encode(:mav_mode_flag_decode_position_auto), do: 4
  def encode(:mav_mode_flag_decode_position_test), do: 2
  def encode(:mav_mode_flag_decode_position_custom_mode), do: 1
  def encode(:mav_goto_do_hold), do: 0
  def encode(:mav_goto_do_continue), do: 1
  def encode(:mav_goto_hold_at_current_position), do: 2
  def encode(:mav_goto_hold_at_specified_position), do: 3
  def encode(:mav_mode_preflight), do: 0
  def encode(:mav_mode_stabilize_disarmed), do: 80
  def encode(:mav_mode_stabilize_armed), do: 208
  def encode(:mav_mode_manual_disarmed), do: 64
  def encode(:mav_mode_manual_armed), do: 192
  def encode(:mav_mode_guided_disarmed), do: 88
  def encode(:mav_mode_guided_armed), do: 216
  def encode(:mav_mode_auto_disarmed), do: 92
  def encode(:mav_mode_auto_armed), do: 220
  def encode(:mav_mode_test_disarmed), do: 66
  def encode(:mav_mode_test_armed), do: 194
  def encode(:mav_state_uninit), do: 0
  def encode(:mav_state_boot), do: nil
  def encode(:mav_state_calibrating), do: nil
  def encode(:mav_state_standby), do: nil
  def encode(:mav_state_active), do: nil
  def encode(:mav_state_critical), do: nil
  def encode(:mav_state_emergency), do: nil
  def encode(:mav_state_poweroff), do: nil
  def encode(:mav_comp_id_all), do: 0
  def encode(:mav_comp_id_autopilot1), do: 1
  def encode(:mav_comp_id_camera), do: 100
  def encode(:mav_comp_id_servo1), do: 140
  def encode(:mav_comp_id_servo2), do: 141
  def encode(:mav_comp_id_servo3), do: 142
  def encode(:mav_comp_id_servo4), do: 143
  def encode(:mav_comp_id_servo5), do: 144
  def encode(:mav_comp_id_servo6), do: 145
  def encode(:mav_comp_id_servo7), do: 146
  def encode(:mav_comp_id_servo8), do: 147
  def encode(:mav_comp_id_servo9), do: 148
  def encode(:mav_comp_id_servo10), do: 149
  def encode(:mav_comp_id_servo11), do: 150
  def encode(:mav_comp_id_servo12), do: 151
  def encode(:mav_comp_id_servo13), do: 152
  def encode(:mav_comp_id_servo14), do: 153
  def encode(:mav_comp_id_gimbal), do: 154
  def encode(:mav_comp_id_log), do: 155
  def encode(:mav_comp_id_adsb), do: 156
  def encode(:mav_comp_id_osd), do: 157
  def encode(:mav_comp_id_peripheral), do: 158
  def encode(:mav_comp_id_qx1_gimbal), do: 159
  def encode(:mav_comp_id_mapper), do: 180
  def encode(:mav_comp_id_missionplanner), do: 190
  def encode(:mav_comp_id_pathplanner), do: 195
  def encode(:mav_comp_id_imu), do: 200
  def encode(:mav_comp_id_imu_2), do: 201
  def encode(:mav_comp_id_imu_3), do: 202
  def encode(:mav_comp_id_gps), do: 220
  def encode(:mav_comp_id_gps2), do: 221
  def encode(:mav_comp_id_udp_bridge), do: 240
  def encode(:mav_comp_id_uart_bridge), do: 241
  def encode(:mav_comp_id_system_control), do: 250
  def encode(:mav_sys_status_sensor_3d_gyro), do: 1
  def encode(:mav_sys_status_sensor_3d_accel), do: 2
  def encode(:mav_sys_status_sensor_3d_mag), do: 4
  def encode(:mav_sys_status_sensor_absolute_pressure), do: 8
  def encode(:mav_sys_status_sensor_differential_pressure), do: 16
  def encode(:mav_sys_status_sensor_gps), do: 32
  def encode(:mav_sys_status_sensor_optical_flow), do: 64
  def encode(:mav_sys_status_sensor_vision_position), do: 128
  def encode(:mav_sys_status_sensor_laser_position), do: 256
  def encode(:mav_sys_status_sensor_external_ground_truth), do: 512
  def encode(:mav_sys_status_sensor_angular_rate_control), do: 1024
  def encode(:mav_sys_status_sensor_attitude_stabilization), do: 2048
  def encode(:mav_sys_status_sensor_yaw_position), do: 4096
  def encode(:mav_sys_status_sensor_z_altitude_control), do: 8192
  def encode(:mav_sys_status_sensor_xy_position_control), do: 16384
  def encode(:mav_sys_status_sensor_motor_outputs), do: 32768
  def encode(:mav_sys_status_sensor_rc_receiver), do: 65536
  def encode(:mav_sys_status_sensor_3d_gyro2), do: 131072
  def encode(:mav_sys_status_sensor_3d_accel2), do: 262144
  def encode(:mav_sys_status_sensor_3d_mag2), do: 524288
  def encode(:mav_sys_status_geofence), do: 1048576
  def encode(:mav_sys_status_ahrs), do: 2097152
  def encode(:mav_sys_status_terrain), do: 4194304
  def encode(:mav_sys_status_reverse_motor), do: 8388608
  def encode(:mav_sys_status_logging), do: 16777216
  def encode(:mav_sys_status_sensor_battery), do: 33554432
  def encode(:mav_frame_global), do: 0
  def encode(:mav_frame_local_ned), do: 1
  def encode(:mav_frame_mission), do: 2
  def encode(:mav_frame_global_relative_alt), do: 3
  def encode(:mav_frame_local_enu), do: 4
  def encode(:mav_frame_global_int), do: 5
  def encode(:mav_frame_global_relative_alt_int), do: 6
  def encode(:mav_frame_local_offset_ned), do: 7
  def encode(:mav_frame_body_ned), do: 8
  def encode(:mav_frame_body_offset_ned), do: 9
  def encode(:mav_frame_global_terrain_alt), do: 10
  def encode(:mav_frame_global_terrain_alt_int), do: 11
  def encode(:mavlink_data_stream_img_jpeg), do: nil
  def encode(:mavlink_data_stream_img_bmp), do: nil
  def encode(:mavlink_data_stream_img_raw8u), do: nil
  def encode(:mavlink_data_stream_img_raw32u), do: nil
  def encode(:mavlink_data_stream_img_pgm), do: nil
  def encode(:mavlink_data_stream_img_png), do: nil
  def encode(:fence_action_none), do: 0
  def encode(:fence_action_guided), do: 1
  def encode(:fence_action_report), do: 2
  def encode(:fence_action_guided_thr_pass), do: 3
  def encode(:fence_action_rtl), do: 4
  def encode(:fence_breach_none), do: 0
  def encode(:fence_breach_minalt), do: 1
  def encode(:fence_breach_maxalt), do: 2
  def encode(:fence_breach_boundary), do: 3
  def encode(:mav_mount_mode_retract), do: 0
  def encode(:mav_mount_mode_neutral), do: 1
  def encode(:mav_mount_mode_mavlink_targeting), do: 2
  def encode(:mav_mount_mode_rc_targeting), do: 3
  def encode(:mav_mount_mode_gps_point), do: 4
  def encode(:mav_cmd_nav_waypoint), do: 16
  def encode(:mav_cmd_nav_loiter_unlim), do: 17
  def encode(:mav_cmd_nav_loiter_turns), do: 18
  def encode(:mav_cmd_nav_loiter_time), do: 19
  def encode(:mav_cmd_nav_return_to_launch), do: 20
  def encode(:mav_cmd_nav_land), do: 21
  def encode(:mav_cmd_nav_takeoff), do: 22
  def encode(:mav_cmd_nav_land_local), do: 23
  def encode(:mav_cmd_nav_takeoff_local), do: 24
  def encode(:mav_cmd_nav_follow), do: 25
  def encode(:mav_cmd_nav_continue_and_change_alt), do: 30
  def encode(:mav_cmd_nav_loiter_to_alt), do: 31
  def encode(:mav_cmd_do_follow), do: 32
  def encode(:mav_cmd_do_follow_reposition), do: 33
  def encode(:mav_cmd_nav_roi), do: 80
  def encode(:mav_cmd_nav_pathplanning), do: 81
  def encode(:mav_cmd_nav_spline_waypoint), do: 82
  def encode(:mav_cmd_nav_vtol_takeoff), do: 84
  def encode(:mav_cmd_nav_vtol_land), do: 85
  def encode(:mav_cmd_nav_guided_enable), do: 92
  def encode(:mav_cmd_nav_delay), do: 93
  def encode(:mav_cmd_nav_payload_place), do: 94
  def encode(:mav_cmd_nav_last), do: 95
  def encode(:mav_cmd_condition_delay), do: 112
  def encode(:mav_cmd_condition_change_alt), do: 113
  def encode(:mav_cmd_condition_distance), do: 114
  def encode(:mav_cmd_condition_yaw), do: 115
  def encode(:mav_cmd_condition_last), do: 159
  def encode(:mav_cmd_do_set_mode), do: 176
  def encode(:mav_cmd_do_jump), do: 177
  def encode(:mav_cmd_do_change_speed), do: 178
  def encode(:mav_cmd_do_set_home), do: 179
  def encode(:mav_cmd_do_set_parameter), do: 180
  def encode(:mav_cmd_do_set_relay), do: 181
  def encode(:mav_cmd_do_repeat_relay), do: 182
  def encode(:mav_cmd_do_set_servo), do: 183
  def encode(:mav_cmd_do_repeat_servo), do: 184
  def encode(:mav_cmd_do_flighttermination), do: 185
  def encode(:mav_cmd_do_change_altitude), do: 186
  def encode(:mav_cmd_do_land_start), do: 189
  def encode(:mav_cmd_do_rally_land), do: 190
  def encode(:mav_cmd_do_go_around), do: 191
  def encode(:mav_cmd_do_reposition), do: 192
  def encode(:mav_cmd_do_pause_continue), do: 193
  def encode(:mav_cmd_do_set_reverse), do: 194
  def encode(:mav_cmd_do_control_video), do: 200
  def encode(:mav_cmd_do_set_roi), do: 201
  def encode(:mav_cmd_do_digicam_configure), do: 202
  def encode(:mav_cmd_do_digicam_control), do: 203
  def encode(:mav_cmd_do_mount_configure), do: 204
  def encode(:mav_cmd_do_mount_control), do: 205
  def encode(:mav_cmd_do_set_cam_trigg_dist), do: 206
  def encode(:mav_cmd_do_fence_enable), do: 207
  def encode(:mav_cmd_do_parachute), do: 208
  def encode(:mav_cmd_do_motor_test), do: 209
  def encode(:mav_cmd_do_inverted_flight), do: 210
  def encode(:mav_cmd_nav_set_yaw_speed), do: 213
  def encode(:mav_cmd_do_set_cam_trigg_interval), do: 214
  def encode(:mav_cmd_do_mount_control_quat), do: 220
  def encode(:mav_cmd_do_guided_master), do: 221
  def encode(:mav_cmd_do_guided_limits), do: 222
  def encode(:mav_cmd_do_engine_control), do: 223
  def encode(:mav_cmd_do_last), do: 240
  def encode(:mav_cmd_preflight_calibration), do: 241
  def encode(:mav_cmd_preflight_set_sensor_offsets), do: 242
  def encode(:mav_cmd_preflight_uavcan), do: 243
  def encode(:mav_cmd_preflight_storage), do: 245
  def encode(:mav_cmd_preflight_reboot_shutdown), do: 246
  def encode(:mav_cmd_override_goto), do: 252
  def encode(:mav_cmd_mission_start), do: 300
  def encode(:mav_cmd_component_arm_disarm), do: 400
  def encode(:mav_cmd_get_home_position), do: 410
  def encode(:mav_cmd_start_rx_pair), do: 500
  def encode(:mav_cmd_get_message_interval), do: 510
  def encode(:mav_cmd_set_message_interval), do: 511
  def encode(:mav_cmd_request_protocol_version), do: 519
  def encode(:mav_cmd_request_autopilot_capabilities), do: 520
  def encode(:mav_cmd_request_camera_information), do: 521
  def encode(:mav_cmd_request_camera_settings), do: 522
  def encode(:mav_cmd_set_camera_settings_1), do: 523
  def encode(:mav_cmd_set_camera_settings_2), do: 524
  def encode(:mav_cmd_request_storage_information), do: 525
  def encode(:mav_cmd_storage_format), do: 526
  def encode(:mav_cmd_request_camera_capture_status), do: 527
  def encode(:mav_cmd_request_flight_information), do: 528
  def encode(:mav_cmd_reset_camera_settings), do: 529
  def encode(:mav_cmd_set_camera_mode), do: 530
  def encode(:mav_cmd_image_start_capture), do: 2000
  def encode(:mav_cmd_image_stop_capture), do: 2001
  def encode(:mav_cmd_request_camera_image_capture), do: 2002
  def encode(:mav_cmd_do_trigger_control), do: 2003
  def encode(:mav_cmd_video_start_capture), do: 2500
  def encode(:mav_cmd_video_stop_capture), do: 2501
  def encode(:mav_cmd_video_start_streaming), do: 2502
  def encode(:mav_cmd_video_stop_streaming), do: 2503
  def encode(:mav_cmd_request_video_stream_information), do: 2504
  def encode(:mav_cmd_logging_start), do: 2510
  def encode(:mav_cmd_logging_stop), do: 2511
  def encode(:mav_cmd_airframe_configuration), do: 2520
  def encode(:mav_cmd_panorama_create), do: 2800
  def encode(:mav_cmd_do_vtol_transition), do: 3000
  def encode(:mav_cmd_set_guided_submode_standard), do: 4000
  def encode(:mav_cmd_set_guided_submode_circle), do: 4001
  def encode(:mav_cmd_nav_fence_return_point), do: 5000
  def encode(:mav_cmd_nav_fence_polygon_vertex_inclusion), do: 5001
  def encode(:mav_cmd_nav_fence_polygon_vertex_exclusion), do: 5002
  def encode(:mav_cmd_nav_fence_circle_inclusion), do: 5003
  def encode(:mav_cmd_nav_fence_circle_exclusion), do: 5004
  def encode(:mav_cmd_nav_rally_point), do: 5100
  def encode(:mav_cmd_payload_prepare_deploy), do: 30001
  def encode(:mav_cmd_payload_control_deploy), do: 30002
  def encode(:mav_cmd_waypoint_user_1), do: 31000
  def encode(:mav_cmd_waypoint_user_2), do: 31001
  def encode(:mav_cmd_waypoint_user_3), do: 31002
  def encode(:mav_cmd_waypoint_user_4), do: 31003
  def encode(:mav_cmd_waypoint_user_5), do: 31004
  def encode(:mav_cmd_spatial_user_1), do: 31005
  def encode(:mav_cmd_spatial_user_2), do: 31006
  def encode(:mav_cmd_spatial_user_3), do: 31007
  def encode(:mav_cmd_spatial_user_4), do: 31008
  def encode(:mav_cmd_spatial_user_5), do: 31009
  def encode(:mav_cmd_user_1), do: 31010
  def encode(:mav_cmd_user_2), do: 31011
  def encode(:mav_cmd_user_3), do: 31012
  def encode(:mav_cmd_user_4), do: 31013
  def encode(:mav_cmd_user_5), do: 31014
  def encode(:mav_data_stream_all), do: 0
  def encode(:mav_data_stream_raw_sensors), do: 1
  def encode(:mav_data_stream_extended_status), do: 2
  def encode(:mav_data_stream_rc_channels), do: 3
  def encode(:mav_data_stream_raw_controller), do: 4
  def encode(:mav_data_stream_position), do: 6
  def encode(:mav_data_stream_extra1), do: 10
  def encode(:mav_data_stream_extra2), do: 11
  def encode(:mav_data_stream_extra3), do: 12
  def encode(:mav_roi_none), do: 0
  def encode(:mav_roi_wpnext), do: 1
  def encode(:mav_roi_wpindex), do: 2
  def encode(:mav_roi_location), do: 3
  def encode(:mav_roi_target), do: 4
  def encode(:mav_cmd_ack_ok), do: nil
  def encode(:mav_cmd_ack_err_fail), do: nil
  def encode(:mav_cmd_ack_err_access_denied), do: nil
  def encode(:mav_cmd_ack_err_not_supported), do: nil
  def encode(:mav_cmd_ack_err_coordinate_frame_not_supported), do: nil
  def encode(:mav_cmd_ack_err_coordinates_out_of_range), do: nil
  def encode(:mav_cmd_ack_err_x_lat_out_of_range), do: nil
  def encode(:mav_cmd_ack_err_y_lon_out_of_range), do: nil
  def encode(:mav_cmd_ack_err_z_alt_out_of_range), do: nil
  def encode(:mav_param_type_uint8), do: 1
  def encode(:mav_param_type_int8), do: 2
  def encode(:mav_param_type_uint16), do: 3
  def encode(:mav_param_type_int16), do: 4
  def encode(:mav_param_type_uint32), do: 5
  def encode(:mav_param_type_int32), do: 6
  def encode(:mav_param_type_uint64), do: 7
  def encode(:mav_param_type_int64), do: 8
  def encode(:mav_param_type_real32), do: 9
  def encode(:mav_param_type_real64), do: 10
  def encode(:mav_result_accepted), do: 0
  def encode(:mav_result_temporarily_rejected), do: 1
  def encode(:mav_result_denied), do: 2
  def encode(:mav_result_unsupported), do: 3
  def encode(:mav_result_failed), do: 4
  def encode(:mav_result_in_progress), do: 5
  def encode(:mav_mission_accepted), do: 0
  def encode(:mav_mission_error), do: 1
  def encode(:mav_mission_unsupported_frame), do: 2
  def encode(:mav_mission_unsupported), do: 3
  def encode(:mav_mission_no_space), do: 4
  def encode(:mav_mission_invalid), do: 5
  def encode(:mav_mission_invalid_param1), do: 6
  def encode(:mav_mission_invalid_param2), do: 7
  def encode(:mav_mission_invalid_param3), do: 8
  def encode(:mav_mission_invalid_param4), do: 9
  def encode(:mav_mission_invalid_param5_x), do: 10
  def encode(:mav_mission_invalid_param6_y), do: 11
  def encode(:mav_mission_invalid_param7), do: 12
  def encode(:mav_mission_invalid_sequence), do: 13
  def encode(:mav_mission_denied), do: 14
  def encode(:mav_severity_emergency), do: 0
  def encode(:mav_severity_alert), do: 1
  def encode(:mav_severity_critical), do: 2
  def encode(:mav_severity_error), do: 3
  def encode(:mav_severity_warning), do: 4
  def encode(:mav_severity_notice), do: 5
  def encode(:mav_severity_info), do: 6
  def encode(:mav_severity_debug), do: 7
  def encode(:mav_power_status_brick_valid), do: 1
  def encode(:mav_power_status_servo_valid), do: 2
  def encode(:mav_power_status_usb_connected), do: 4
  def encode(:mav_power_status_periph_overcurrent), do: 8
  def encode(:mav_power_status_periph_hipower_overcurrent), do: 16
  def encode(:mav_power_status_changed), do: 32
  def encode(:serial_control_dev_telem1), do: 0
  def encode(:serial_control_dev_telem2), do: 1
  def encode(:serial_control_dev_gps1), do: 2
  def encode(:serial_control_dev_gps2), do: 3
  def encode(:serial_control_dev_shell), do: 10
  def encode(:serial_control_flag_reply), do: 1
  def encode(:serial_control_flag_respond), do: 2
  def encode(:serial_control_flag_exclusive), do: 4
  def encode(:serial_control_flag_blocking), do: 8
  def encode(:serial_control_flag_multi), do: 16
  def encode(:mav_distance_sensor_laser), do: 0
  def encode(:mav_distance_sensor_ultrasound), do: 1
  def encode(:mav_distance_sensor_infrared), do: 2
  def encode(:mav_sensor_rotation_none), do: 0
  def encode(:mav_sensor_rotation_yaw_45), do: 1
  def encode(:mav_sensor_rotation_yaw_90), do: 2
  def encode(:mav_sensor_rotation_yaw_135), do: 3
  def encode(:mav_sensor_rotation_yaw_180), do: 4
  def encode(:mav_sensor_rotation_yaw_225), do: 5
  def encode(:mav_sensor_rotation_yaw_270), do: 6
  def encode(:mav_sensor_rotation_yaw_315), do: 7
  def encode(:mav_sensor_rotation_roll_180), do: 8
  def encode(:mav_sensor_rotation_roll_180_yaw_45), do: 9
  def encode(:mav_sensor_rotation_roll_180_yaw_90), do: 10
  def encode(:mav_sensor_rotation_roll_180_yaw_135), do: 11
  def encode(:mav_sensor_rotation_pitch_180), do: 12
  def encode(:mav_sensor_rotation_roll_180_yaw_225), do: 13
  def encode(:mav_sensor_rotation_roll_180_yaw_270), do: 14
  def encode(:mav_sensor_rotation_roll_180_yaw_315), do: 15
  def encode(:mav_sensor_rotation_roll_90), do: 16
  def encode(:mav_sensor_rotation_roll_90_yaw_45), do: 17
  def encode(:mav_sensor_rotation_roll_90_yaw_90), do: 18
  def encode(:mav_sensor_rotation_roll_90_yaw_135), do: 19
  def encode(:mav_sensor_rotation_roll_270), do: 20
  def encode(:mav_sensor_rotation_roll_270_yaw_45), do: 21
  def encode(:mav_sensor_rotation_roll_270_yaw_90), do: 22
  def encode(:mav_sensor_rotation_roll_270_yaw_135), do: 23
  def encode(:mav_sensor_rotation_pitch_90), do: 24
  def encode(:mav_sensor_rotation_pitch_270), do: 25
  def encode(:mav_sensor_rotation_pitch_180_yaw_90), do: 26
  def encode(:mav_sensor_rotation_pitch_180_yaw_270), do: 27
  def encode(:mav_sensor_rotation_roll_90_pitch_90), do: 28
  def encode(:mav_sensor_rotation_roll_180_pitch_90), do: 29
  def encode(:mav_sensor_rotation_roll_270_pitch_90), do: 30
  def encode(:mav_sensor_rotation_roll_90_pitch_180), do: 31
  def encode(:mav_sensor_rotation_roll_270_pitch_180), do: 32
  def encode(:mav_sensor_rotation_roll_90_pitch_270), do: 33
  def encode(:mav_sensor_rotation_roll_180_pitch_270), do: 34
  def encode(:mav_sensor_rotation_roll_270_pitch_270), do: 35
  def encode(:mav_sensor_rotation_roll_90_pitch_180_yaw_90), do: 36
  def encode(:mav_sensor_rotation_roll_90_yaw_270), do: 37
  def encode(:mav_sensor_rotation_roll_315_pitch_315_yaw_315), do: 38
  def encode(:mav_protocol_capability_mission_float), do: 1
  def encode(:mav_protocol_capability_param_float), do: 2
  def encode(:mav_protocol_capability_mission_int), do: 4
  def encode(:mav_protocol_capability_command_int), do: 8
  def encode(:mav_protocol_capability_param_union), do: 16
  def encode(:mav_protocol_capability_ftp), do: 32
  def encode(:mav_protocol_capability_set_attitude_target), do: 64
  def encode(:mav_protocol_capability_set_position_target_local_ned), do: 128
  def encode(:mav_protocol_capability_set_position_target_global_int), do: 256
  def encode(:mav_protocol_capability_terrain), do: 512
  def encode(:mav_protocol_capability_set_actuator_target), do: 1024
  def encode(:mav_protocol_capability_flight_termination), do: 2048
  def encode(:mav_protocol_capability_compass_calibration), do: 4096
  def encode(:mav_protocol_capability_mavlink2), do: 8192
  def encode(:mav_protocol_capability_mission_fence), do: 16384
  def encode(:mav_protocol_capability_mission_rally), do: 32768
  def encode(:mav_protocol_capability_flight_information), do: 65536
  def encode(:mav_mission_type_mission), do: 0
  def encode(:mav_mission_type_fence), do: 1
  def encode(:mav_mission_type_rally), do: 2
  def encode(:mav_mission_type_all), do: 255
  def encode(:mav_estimator_type_naive), do: 1
  def encode(:mav_estimator_type_vision), do: 2
  def encode(:mav_estimator_type_vio), do: 3
  def encode(:mav_estimator_type_gps), do: 4
  def encode(:mav_estimator_type_gps_ins), do: 5
  def encode(:mav_battery_type_unknown), do: 0
  def encode(:mav_battery_type_lipo), do: 1
  def encode(:mav_battery_type_life), do: 2
  def encode(:mav_battery_type_lion), do: 3
  def encode(:mav_battery_type_nimh), do: 4
  def encode(:mav_battery_function_unknown), do: 0
  def encode(:mav_battery_function_all), do: 1
  def encode(:mav_battery_function_propulsion), do: 2
  def encode(:mav_battery_function_avionics), do: 3
  def encode(:mav_battery_type_payload), do: 4
  def encode(:mav_vtol_state_undefined), do: 0
  def encode(:mav_vtol_state_transition_to_fw), do: 1
  def encode(:mav_vtol_state_transition_to_mc), do: 2
  def encode(:mav_vtol_state_mc), do: 3
  def encode(:mav_vtol_state_fw), do: 4
  def encode(:mav_landed_state_undefined), do: 0
  def encode(:mav_landed_state_on_ground), do: 1
  def encode(:mav_landed_state_in_air), do: 2
  def encode(:mav_landed_state_takeoff), do: 3
  def encode(:mav_landed_state_landing), do: 4
  def encode(:adsb_altitude_type_pressure_qnh), do: 0
  def encode(:adsb_altitude_type_geometric), do: 1
  def encode(:adsb_emitter_type_no_info), do: 0
  def encode(:adsb_emitter_type_light), do: 1
  def encode(:adsb_emitter_type_small), do: 2
  def encode(:adsb_emitter_type_large), do: 3
  def encode(:adsb_emitter_type_high_vortex_large), do: 4
  def encode(:adsb_emitter_type_heavy), do: 5
  def encode(:adsb_emitter_type_highly_manuv), do: 6
  def encode(:adsb_emitter_type_rotocraft), do: 7
  def encode(:adsb_emitter_type_unassigned), do: 8
  def encode(:adsb_emitter_type_glider), do: 9
  def encode(:adsb_emitter_type_lighter_air), do: 10
  def encode(:adsb_emitter_type_parachute), do: 11
  def encode(:adsb_emitter_type_ultra_light), do: 12
  def encode(:adsb_emitter_type_unassigned2), do: 13
  def encode(:adsb_emitter_type_uav), do: 14
  def encode(:adsb_emitter_type_space), do: 15
  def encode(:adsb_emitter_type_unassgined3), do: 16
  def encode(:adsb_emitter_type_emergency_surface), do: 17
  def encode(:adsb_emitter_type_service_surface), do: 18
  def encode(:adsb_emitter_type_point_obstacle), do: 19
  def encode(:adsb_flags_valid_coords), do: 1
  def encode(:adsb_flags_valid_altitude), do: 2
  def encode(:adsb_flags_valid_heading), do: 4
  def encode(:adsb_flags_valid_velocity), do: 8
  def encode(:adsb_flags_valid_callsign), do: 16
  def encode(:adsb_flags_valid_squawk), do: 32
  def encode(:adsb_flags_simulated), do: 64
  def encode(:mav_do_reposition_flags_change_mode), do: 1
  def encode(:estimator_attitude), do: 1
  def encode(:estimator_velocity_horiz), do: 2
  def encode(:estimator_velocity_vert), do: 4
  def encode(:estimator_pos_horiz_rel), do: 8
  def encode(:estimator_pos_horiz_abs), do: 16
  def encode(:estimator_pos_vert_abs), do: 32
  def encode(:estimator_pos_vert_agl), do: 64
  def encode(:estimator_const_pos_mode), do: 128
  def encode(:estimator_pred_pos_horiz_rel), do: 256
  def encode(:estimator_pred_pos_horiz_abs), do: 512
  def encode(:estimator_gps_glitch), do: 1024
  def encode(:motor_test_throttle_percent), do: 0
  def encode(:motor_test_throttle_pwm), do: 1
  def encode(:motor_test_throttle_pilot), do: 2
  def encode(:gps_input_ignore_flag_alt), do: 1
  def encode(:gps_input_ignore_flag_hdop), do: 2
  def encode(:gps_input_ignore_flag_vdop), do: 4
  def encode(:gps_input_ignore_flag_vel_horiz), do: 8
  def encode(:gps_input_ignore_flag_vel_vert), do: 16
  def encode(:gps_input_ignore_flag_speed_accuracy), do: 32
  def encode(:gps_input_ignore_flag_horizontal_accuracy), do: 64
  def encode(:gps_input_ignore_flag_vertical_accuracy), do: 128
  def encode(:mav_collision_action_none), do: 0
  def encode(:mav_collision_action_report), do: 1
  def encode(:mav_collision_action_ascend_or_descend), do: 2
  def encode(:mav_collision_action_move_horizontally), do: 3
  def encode(:mav_collision_action_move_perpendicular), do: 4
  def encode(:mav_collision_action_rtl), do: 5
  def encode(:mav_collision_action_hover), do: 6
  def encode(:mav_collision_threat_level_none), do: 0
  def encode(:mav_collision_threat_level_low), do: 1
  def encode(:mav_collision_threat_level_high), do: 2
  def encode(:mav_collision_src_adsb), do: 0
  def encode(:mav_collision_src_mavlink_gps_global_int), do: 1
  def encode(:gps_fix_type_no_gps), do: 0
  def encode(:gps_fix_type_no_fix), do: 1
  def encode(:gps_fix_type_2d_fix), do: 2
  def encode(:gps_fix_type_3d_fix), do: 3
  def encode(:gps_fix_type_dgps), do: 4
  def encode(:gps_fix_type_rtk_float), do: 5
  def encode(:gps_fix_type_rtk_fixed), do: 6
  def encode(:gps_fix_type_static), do: 7
   
  @doc "Return the atom representation of a Mavlink enumeration value from the enumeration type and encoded integer"
  @spec decode(enum_type, integer) :: enum_value
  def decode(:mav_autopilot, 0), do: :mav_autopilot_generic
  def decode(:mav_autopilot, 1), do: :mav_autopilot_reserved
  def decode(:mav_autopilot, 2), do: :mav_autopilot_slugs
  def decode(:mav_autopilot, 3), do: :mav_autopilot_ardupilotmega
  def decode(:mav_autopilot, 4), do: :mav_autopilot_openpilot
  def decode(:mav_autopilot, 5), do: :mav_autopilot_generic_waypoints_only
  def decode(:mav_autopilot, 6), do: :mav_autopilot_generic_waypoints_and_simple_navigation_only
  def decode(:mav_autopilot, 7), do: :mav_autopilot_generic_mission_full
  def decode(:mav_autopilot, 8), do: :mav_autopilot_invalid
  def decode(:mav_autopilot, 9), do: :mav_autopilot_ppz
  def decode(:mav_autopilot, 10), do: :mav_autopilot_udb
  def decode(:mav_autopilot, 11), do: :mav_autopilot_fp
  def decode(:mav_autopilot, 12), do: :mav_autopilot_px4
  def decode(:mav_autopilot, 13), do: :mav_autopilot_smaccmpilot
  def decode(:mav_autopilot, 14), do: :mav_autopilot_autoquad
  def decode(:mav_autopilot, 15), do: :mav_autopilot_armazila
  def decode(:mav_autopilot, 16), do: :mav_autopilot_aerob
  def decode(:mav_autopilot, 17), do: :mav_autopilot_asluav
  def decode(:mav_autopilot, 18), do: :mav_autopilot_smartap
  def decode(:mav_type, 0), do: :mav_type_generic
  def decode(:mav_type, 1), do: :mav_type_fixed_wing
  def decode(:mav_type, 2), do: :mav_type_quadrotor
  def decode(:mav_type, 3), do: :mav_type_coaxial
  def decode(:mav_type, 4), do: :mav_type_helicopter
  def decode(:mav_type, 5), do: :mav_type_antenna_tracker
  def decode(:mav_type, 6), do: :mav_type_gcs
  def decode(:mav_type, 7), do: :mav_type_airship
  def decode(:mav_type, 8), do: :mav_type_free_balloon
  def decode(:mav_type, 9), do: :mav_type_rocket
  def decode(:mav_type, 10), do: :mav_type_ground_rover
  def decode(:mav_type, 11), do: :mav_type_surface_boat
  def decode(:mav_type, 12), do: :mav_type_submarine
  def decode(:mav_type, 13), do: :mav_type_hexarotor
  def decode(:mav_type, 14), do: :mav_type_octorotor
  def decode(:mav_type, 15), do: :mav_type_tricopter
  def decode(:mav_type, 16), do: :mav_type_flapping_wing
  def decode(:mav_type, 17), do: :mav_type_kite
  def decode(:mav_type, 18), do: :mav_type_onboard_controller
  def decode(:mav_type, 19), do: :mav_type_vtol_duorotor
  def decode(:mav_type, 20), do: :mav_type_vtol_quadrotor
  def decode(:mav_type, 21), do: :mav_type_vtol_tiltrotor
  def decode(:mav_type, 22), do: :mav_type_vtol_reserved2
  def decode(:mav_type, 23), do: :mav_type_vtol_reserved3
  def decode(:mav_type, 24), do: :mav_type_vtol_reserved4
  def decode(:mav_type, 25), do: :mav_type_vtol_reserved5
  def decode(:mav_type, 26), do: :mav_type_gimbal
  def decode(:mav_type, 27), do: :mav_type_adsb
  def decode(:firmware_version_type, 0), do: :firmware_version_type_dev
  def decode(:firmware_version_type, 64), do: :firmware_version_type_alpha
  def decode(:firmware_version_type, 128), do: :firmware_version_type_beta
  def decode(:firmware_version_type, 192), do: :firmware_version_type_rc
  def decode(:firmware_version_type, 255), do: :firmware_version_type_official
  def decode(:mav_mode_flag, 128), do: :mav_mode_flag_safety_armed
  def decode(:mav_mode_flag, 64), do: :mav_mode_flag_manual_input_enabled
  def decode(:mav_mode_flag, 32), do: :mav_mode_flag_hil_enabled
  def decode(:mav_mode_flag, 16), do: :mav_mode_flag_stabilize_enabled
  def decode(:mav_mode_flag, 8), do: :mav_mode_flag_guided_enabled
  def decode(:mav_mode_flag, 4), do: :mav_mode_flag_auto_enabled
  def decode(:mav_mode_flag, 2), do: :mav_mode_flag_test_enabled
  def decode(:mav_mode_flag, 1), do: :mav_mode_flag_custom_mode_enabled
  def decode(:mav_mode_flag_decode_position, 128), do: :mav_mode_flag_decode_position_safety
  def decode(:mav_mode_flag_decode_position, 64), do: :mav_mode_flag_decode_position_manual
  def decode(:mav_mode_flag_decode_position, 32), do: :mav_mode_flag_decode_position_hil
  def decode(:mav_mode_flag_decode_position, 16), do: :mav_mode_flag_decode_position_stabilize
  def decode(:mav_mode_flag_decode_position, 8), do: :mav_mode_flag_decode_position_guided
  def decode(:mav_mode_flag_decode_position, 4), do: :mav_mode_flag_decode_position_auto
  def decode(:mav_mode_flag_decode_position, 2), do: :mav_mode_flag_decode_position_test
  def decode(:mav_mode_flag_decode_position, 1), do: :mav_mode_flag_decode_position_custom_mode
  def decode(:mav_goto, 0), do: :mav_goto_do_hold
  def decode(:mav_goto, 1), do: :mav_goto_do_continue
  def decode(:mav_goto, 2), do: :mav_goto_hold_at_current_position
  def decode(:mav_goto, 3), do: :mav_goto_hold_at_specified_position
  def decode(:mav_mode, 0), do: :mav_mode_preflight
  def decode(:mav_mode, 80), do: :mav_mode_stabilize_disarmed
  def decode(:mav_mode, 208), do: :mav_mode_stabilize_armed
  def decode(:mav_mode, 64), do: :mav_mode_manual_disarmed
  def decode(:mav_mode, 192), do: :mav_mode_manual_armed
  def decode(:mav_mode, 88), do: :mav_mode_guided_disarmed
  def decode(:mav_mode, 216), do: :mav_mode_guided_armed
  def decode(:mav_mode, 92), do: :mav_mode_auto_disarmed
  def decode(:mav_mode, 220), do: :mav_mode_auto_armed
  def decode(:mav_mode, 66), do: :mav_mode_test_disarmed
  def decode(:mav_mode, 194), do: :mav_mode_test_armed
  def decode(:mav_state, 0), do: :mav_state_uninit
  def decode(:mav_state, nil), do: :mav_state_boot
  def decode(:mav_state, nil), do: :mav_state_calibrating
  def decode(:mav_state, nil), do: :mav_state_standby
  def decode(:mav_state, nil), do: :mav_state_active
  def decode(:mav_state, nil), do: :mav_state_critical
  def decode(:mav_state, nil), do: :mav_state_emergency
  def decode(:mav_state, nil), do: :mav_state_poweroff
  def decode(:mav_component, 0), do: :mav_comp_id_all
  def decode(:mav_component, 1), do: :mav_comp_id_autopilot1
  def decode(:mav_component, 100), do: :mav_comp_id_camera
  def decode(:mav_component, 140), do: :mav_comp_id_servo1
  def decode(:mav_component, 141), do: :mav_comp_id_servo2
  def decode(:mav_component, 142), do: :mav_comp_id_servo3
  def decode(:mav_component, 143), do: :mav_comp_id_servo4
  def decode(:mav_component, 144), do: :mav_comp_id_servo5
  def decode(:mav_component, 145), do: :mav_comp_id_servo6
  def decode(:mav_component, 146), do: :mav_comp_id_servo7
  def decode(:mav_component, 147), do: :mav_comp_id_servo8
  def decode(:mav_component, 148), do: :mav_comp_id_servo9
  def decode(:mav_component, 149), do: :mav_comp_id_servo10
  def decode(:mav_component, 150), do: :mav_comp_id_servo11
  def decode(:mav_component, 151), do: :mav_comp_id_servo12
  def decode(:mav_component, 152), do: :mav_comp_id_servo13
  def decode(:mav_component, 153), do: :mav_comp_id_servo14
  def decode(:mav_component, 154), do: :mav_comp_id_gimbal
  def decode(:mav_component, 155), do: :mav_comp_id_log
  def decode(:mav_component, 156), do: :mav_comp_id_adsb
  def decode(:mav_component, 157), do: :mav_comp_id_osd
  def decode(:mav_component, 158), do: :mav_comp_id_peripheral
  def decode(:mav_component, 159), do: :mav_comp_id_qx1_gimbal
  def decode(:mav_component, 180), do: :mav_comp_id_mapper
  def decode(:mav_component, 190), do: :mav_comp_id_missionplanner
  def decode(:mav_component, 195), do: :mav_comp_id_pathplanner
  def decode(:mav_component, 200), do: :mav_comp_id_imu
  def decode(:mav_component, 201), do: :mav_comp_id_imu_2
  def decode(:mav_component, 202), do: :mav_comp_id_imu_3
  def decode(:mav_component, 220), do: :mav_comp_id_gps
  def decode(:mav_component, 221), do: :mav_comp_id_gps2
  def decode(:mav_component, 240), do: :mav_comp_id_udp_bridge
  def decode(:mav_component, 241), do: :mav_comp_id_uart_bridge
  def decode(:mav_component, 250), do: :mav_comp_id_system_control
  def decode(:mav_sys_status_sensor, 1), do: :mav_sys_status_sensor_3d_gyro
  def decode(:mav_sys_status_sensor, 2), do: :mav_sys_status_sensor_3d_accel
  def decode(:mav_sys_status_sensor, 4), do: :mav_sys_status_sensor_3d_mag
  def decode(:mav_sys_status_sensor, 8), do: :mav_sys_status_sensor_absolute_pressure
  def decode(:mav_sys_status_sensor, 16), do: :mav_sys_status_sensor_differential_pressure
  def decode(:mav_sys_status_sensor, 32), do: :mav_sys_status_sensor_gps
  def decode(:mav_sys_status_sensor, 64), do: :mav_sys_status_sensor_optical_flow
  def decode(:mav_sys_status_sensor, 128), do: :mav_sys_status_sensor_vision_position
  def decode(:mav_sys_status_sensor, 256), do: :mav_sys_status_sensor_laser_position
  def decode(:mav_sys_status_sensor, 512), do: :mav_sys_status_sensor_external_ground_truth
  def decode(:mav_sys_status_sensor, 1024), do: :mav_sys_status_sensor_angular_rate_control
  def decode(:mav_sys_status_sensor, 2048), do: :mav_sys_status_sensor_attitude_stabilization
  def decode(:mav_sys_status_sensor, 4096), do: :mav_sys_status_sensor_yaw_position
  def decode(:mav_sys_status_sensor, 8192), do: :mav_sys_status_sensor_z_altitude_control
  def decode(:mav_sys_status_sensor, 16384), do: :mav_sys_status_sensor_xy_position_control
  def decode(:mav_sys_status_sensor, 32768), do: :mav_sys_status_sensor_motor_outputs
  def decode(:mav_sys_status_sensor, 65536), do: :mav_sys_status_sensor_rc_receiver
  def decode(:mav_sys_status_sensor, 131072), do: :mav_sys_status_sensor_3d_gyro2
  def decode(:mav_sys_status_sensor, 262144), do: :mav_sys_status_sensor_3d_accel2
  def decode(:mav_sys_status_sensor, 524288), do: :mav_sys_status_sensor_3d_mag2
  def decode(:mav_sys_status_sensor, 1048576), do: :mav_sys_status_geofence
  def decode(:mav_sys_status_sensor, 2097152), do: :mav_sys_status_ahrs
  def decode(:mav_sys_status_sensor, 4194304), do: :mav_sys_status_terrain
  def decode(:mav_sys_status_sensor, 8388608), do: :mav_sys_status_reverse_motor
  def decode(:mav_sys_status_sensor, 16777216), do: :mav_sys_status_logging
  def decode(:mav_sys_status_sensor, 33554432), do: :mav_sys_status_sensor_battery
  def decode(:mav_frame, 0), do: :mav_frame_global
  def decode(:mav_frame, 1), do: :mav_frame_local_ned
  def decode(:mav_frame, 2), do: :mav_frame_mission
  def decode(:mav_frame, 3), do: :mav_frame_global_relative_alt
  def decode(:mav_frame, 4), do: :mav_frame_local_enu
  def decode(:mav_frame, 5), do: :mav_frame_global_int
  def decode(:mav_frame, 6), do: :mav_frame_global_relative_alt_int
  def decode(:mav_frame, 7), do: :mav_frame_local_offset_ned
  def decode(:mav_frame, 8), do: :mav_frame_body_ned
  def decode(:mav_frame, 9), do: :mav_frame_body_offset_ned
  def decode(:mav_frame, 10), do: :mav_frame_global_terrain_alt
  def decode(:mav_frame, 11), do: :mav_frame_global_terrain_alt_int
  def decode(:mavlink_data_stream_type, nil), do: :mavlink_data_stream_img_jpeg
  def decode(:mavlink_data_stream_type, nil), do: :mavlink_data_stream_img_bmp
  def decode(:mavlink_data_stream_type, nil), do: :mavlink_data_stream_img_raw8u
  def decode(:mavlink_data_stream_type, nil), do: :mavlink_data_stream_img_raw32u
  def decode(:mavlink_data_stream_type, nil), do: :mavlink_data_stream_img_pgm
  def decode(:mavlink_data_stream_type, nil), do: :mavlink_data_stream_img_png
  def decode(:fence_action, 0), do: :fence_action_none
  def decode(:fence_action, 1), do: :fence_action_guided
  def decode(:fence_action, 2), do: :fence_action_report
  def decode(:fence_action, 3), do: :fence_action_guided_thr_pass
  def decode(:fence_action, 4), do: :fence_action_rtl
  def decode(:fence_breach, 0), do: :fence_breach_none
  def decode(:fence_breach, 1), do: :fence_breach_minalt
  def decode(:fence_breach, 2), do: :fence_breach_maxalt
  def decode(:fence_breach, 3), do: :fence_breach_boundary
  def decode(:mav_mount_mode, 0), do: :mav_mount_mode_retract
  def decode(:mav_mount_mode, 1), do: :mav_mount_mode_neutral
  def decode(:mav_mount_mode, 2), do: :mav_mount_mode_mavlink_targeting
  def decode(:mav_mount_mode, 3), do: :mav_mount_mode_rc_targeting
  def decode(:mav_mount_mode, 4), do: :mav_mount_mode_gps_point
  def decode(:mav_cmd, 16), do: :mav_cmd_nav_waypoint
  def decode(:mav_cmd, 17), do: :mav_cmd_nav_loiter_unlim
  def decode(:mav_cmd, 18), do: :mav_cmd_nav_loiter_turns
  def decode(:mav_cmd, 19), do: :mav_cmd_nav_loiter_time
  def decode(:mav_cmd, 20), do: :mav_cmd_nav_return_to_launch
  def decode(:mav_cmd, 21), do: :mav_cmd_nav_land
  def decode(:mav_cmd, 22), do: :mav_cmd_nav_takeoff
  def decode(:mav_cmd, 23), do: :mav_cmd_nav_land_local
  def decode(:mav_cmd, 24), do: :mav_cmd_nav_takeoff_local
  def decode(:mav_cmd, 25), do: :mav_cmd_nav_follow
  def decode(:mav_cmd, 30), do: :mav_cmd_nav_continue_and_change_alt
  def decode(:mav_cmd, 31), do: :mav_cmd_nav_loiter_to_alt
  def decode(:mav_cmd, 32), do: :mav_cmd_do_follow
  def decode(:mav_cmd, 33), do: :mav_cmd_do_follow_reposition
  def decode(:mav_cmd, 80), do: :mav_cmd_nav_roi
  def decode(:mav_cmd, 81), do: :mav_cmd_nav_pathplanning
  def decode(:mav_cmd, 82), do: :mav_cmd_nav_spline_waypoint
  def decode(:mav_cmd, 84), do: :mav_cmd_nav_vtol_takeoff
  def decode(:mav_cmd, 85), do: :mav_cmd_nav_vtol_land
  def decode(:mav_cmd, 92), do: :mav_cmd_nav_guided_enable
  def decode(:mav_cmd, 93), do: :mav_cmd_nav_delay
  def decode(:mav_cmd, 94), do: :mav_cmd_nav_payload_place
  def decode(:mav_cmd, 95), do: :mav_cmd_nav_last
  def decode(:mav_cmd, 112), do: :mav_cmd_condition_delay
  def decode(:mav_cmd, 113), do: :mav_cmd_condition_change_alt
  def decode(:mav_cmd, 114), do: :mav_cmd_condition_distance
  def decode(:mav_cmd, 115), do: :mav_cmd_condition_yaw
  def decode(:mav_cmd, 159), do: :mav_cmd_condition_last
  def decode(:mav_cmd, 176), do: :mav_cmd_do_set_mode
  def decode(:mav_cmd, 177), do: :mav_cmd_do_jump
  def decode(:mav_cmd, 178), do: :mav_cmd_do_change_speed
  def decode(:mav_cmd, 179), do: :mav_cmd_do_set_home
  def decode(:mav_cmd, 180), do: :mav_cmd_do_set_parameter
  def decode(:mav_cmd, 181), do: :mav_cmd_do_set_relay
  def decode(:mav_cmd, 182), do: :mav_cmd_do_repeat_relay
  def decode(:mav_cmd, 183), do: :mav_cmd_do_set_servo
  def decode(:mav_cmd, 184), do: :mav_cmd_do_repeat_servo
  def decode(:mav_cmd, 185), do: :mav_cmd_do_flighttermination
  def decode(:mav_cmd, 186), do: :mav_cmd_do_change_altitude
  def decode(:mav_cmd, 189), do: :mav_cmd_do_land_start
  def decode(:mav_cmd, 190), do: :mav_cmd_do_rally_land
  def decode(:mav_cmd, 191), do: :mav_cmd_do_go_around
  def decode(:mav_cmd, 192), do: :mav_cmd_do_reposition
  def decode(:mav_cmd, 193), do: :mav_cmd_do_pause_continue
  def decode(:mav_cmd, 194), do: :mav_cmd_do_set_reverse
  def decode(:mav_cmd, 200), do: :mav_cmd_do_control_video
  def decode(:mav_cmd, 201), do: :mav_cmd_do_set_roi
  def decode(:mav_cmd, 202), do: :mav_cmd_do_digicam_configure
  def decode(:mav_cmd, 203), do: :mav_cmd_do_digicam_control
  def decode(:mav_cmd, 204), do: :mav_cmd_do_mount_configure
  def decode(:mav_cmd, 205), do: :mav_cmd_do_mount_control
  def decode(:mav_cmd, 206), do: :mav_cmd_do_set_cam_trigg_dist
  def decode(:mav_cmd, 207), do: :mav_cmd_do_fence_enable
  def decode(:mav_cmd, 208), do: :mav_cmd_do_parachute
  def decode(:mav_cmd, 209), do: :mav_cmd_do_motor_test
  def decode(:mav_cmd, 210), do: :mav_cmd_do_inverted_flight
  def decode(:mav_cmd, 213), do: :mav_cmd_nav_set_yaw_speed
  def decode(:mav_cmd, 214), do: :mav_cmd_do_set_cam_trigg_interval
  def decode(:mav_cmd, 220), do: :mav_cmd_do_mount_control_quat
  def decode(:mav_cmd, 221), do: :mav_cmd_do_guided_master
  def decode(:mav_cmd, 222), do: :mav_cmd_do_guided_limits
  def decode(:mav_cmd, 223), do: :mav_cmd_do_engine_control
  def decode(:mav_cmd, 240), do: :mav_cmd_do_last
  def decode(:mav_cmd, 241), do: :mav_cmd_preflight_calibration
  def decode(:mav_cmd, 242), do: :mav_cmd_preflight_set_sensor_offsets
  def decode(:mav_cmd, 243), do: :mav_cmd_preflight_uavcan
  def decode(:mav_cmd, 245), do: :mav_cmd_preflight_storage
  def decode(:mav_cmd, 246), do: :mav_cmd_preflight_reboot_shutdown
  def decode(:mav_cmd, 252), do: :mav_cmd_override_goto
  def decode(:mav_cmd, 300), do: :mav_cmd_mission_start
  def decode(:mav_cmd, 400), do: :mav_cmd_component_arm_disarm
  def decode(:mav_cmd, 410), do: :mav_cmd_get_home_position
  def decode(:mav_cmd, 500), do: :mav_cmd_start_rx_pair
  def decode(:mav_cmd, 510), do: :mav_cmd_get_message_interval
  def decode(:mav_cmd, 511), do: :mav_cmd_set_message_interval
  def decode(:mav_cmd, 519), do: :mav_cmd_request_protocol_version
  def decode(:mav_cmd, 520), do: :mav_cmd_request_autopilot_capabilities
  def decode(:mav_cmd, 521), do: :mav_cmd_request_camera_information
  def decode(:mav_cmd, 522), do: :mav_cmd_request_camera_settings
  def decode(:mav_cmd, 523), do: :mav_cmd_set_camera_settings_1
  def decode(:mav_cmd, 524), do: :mav_cmd_set_camera_settings_2
  def decode(:mav_cmd, 525), do: :mav_cmd_request_storage_information
  def decode(:mav_cmd, 526), do: :mav_cmd_storage_format
  def decode(:mav_cmd, 527), do: :mav_cmd_request_camera_capture_status
  def decode(:mav_cmd, 528), do: :mav_cmd_request_flight_information
  def decode(:mav_cmd, 529), do: :mav_cmd_reset_camera_settings
  def decode(:mav_cmd, 530), do: :mav_cmd_set_camera_mode
  def decode(:mav_cmd, 2000), do: :mav_cmd_image_start_capture
  def decode(:mav_cmd, 2001), do: :mav_cmd_image_stop_capture
  def decode(:mav_cmd, 2002), do: :mav_cmd_request_camera_image_capture
  def decode(:mav_cmd, 2003), do: :mav_cmd_do_trigger_control
  def decode(:mav_cmd, 2500), do: :mav_cmd_video_start_capture
  def decode(:mav_cmd, 2501), do: :mav_cmd_video_stop_capture
  def decode(:mav_cmd, 2502), do: :mav_cmd_video_start_streaming
  def decode(:mav_cmd, 2503), do: :mav_cmd_video_stop_streaming
  def decode(:mav_cmd, 2504), do: :mav_cmd_request_video_stream_information
  def decode(:mav_cmd, 2510), do: :mav_cmd_logging_start
  def decode(:mav_cmd, 2511), do: :mav_cmd_logging_stop
  def decode(:mav_cmd, 2520), do: :mav_cmd_airframe_configuration
  def decode(:mav_cmd, 2800), do: :mav_cmd_panorama_create
  def decode(:mav_cmd, 3000), do: :mav_cmd_do_vtol_transition
  def decode(:mav_cmd, 4000), do: :mav_cmd_set_guided_submode_standard
  def decode(:mav_cmd, 4001), do: :mav_cmd_set_guided_submode_circle
  def decode(:mav_cmd, 5000), do: :mav_cmd_nav_fence_return_point
  def decode(:mav_cmd, 5001), do: :mav_cmd_nav_fence_polygon_vertex_inclusion
  def decode(:mav_cmd, 5002), do: :mav_cmd_nav_fence_polygon_vertex_exclusion
  def decode(:mav_cmd, 5003), do: :mav_cmd_nav_fence_circle_inclusion
  def decode(:mav_cmd, 5004), do: :mav_cmd_nav_fence_circle_exclusion
  def decode(:mav_cmd, 5100), do: :mav_cmd_nav_rally_point
  def decode(:mav_cmd, 30001), do: :mav_cmd_payload_prepare_deploy
  def decode(:mav_cmd, 30002), do: :mav_cmd_payload_control_deploy
  def decode(:mav_cmd, 31000), do: :mav_cmd_waypoint_user_1
  def decode(:mav_cmd, 31001), do: :mav_cmd_waypoint_user_2
  def decode(:mav_cmd, 31002), do: :mav_cmd_waypoint_user_3
  def decode(:mav_cmd, 31003), do: :mav_cmd_waypoint_user_4
  def decode(:mav_cmd, 31004), do: :mav_cmd_waypoint_user_5
  def decode(:mav_cmd, 31005), do: :mav_cmd_spatial_user_1
  def decode(:mav_cmd, 31006), do: :mav_cmd_spatial_user_2
  def decode(:mav_cmd, 31007), do: :mav_cmd_spatial_user_3
  def decode(:mav_cmd, 31008), do: :mav_cmd_spatial_user_4
  def decode(:mav_cmd, 31009), do: :mav_cmd_spatial_user_5
  def decode(:mav_cmd, 31010), do: :mav_cmd_user_1
  def decode(:mav_cmd, 31011), do: :mav_cmd_user_2
  def decode(:mav_cmd, 31012), do: :mav_cmd_user_3
  def decode(:mav_cmd, 31013), do: :mav_cmd_user_4
  def decode(:mav_cmd, 31014), do: :mav_cmd_user_5
  def decode(:mav_data_stream, 0), do: :mav_data_stream_all
  def decode(:mav_data_stream, 1), do: :mav_data_stream_raw_sensors
  def decode(:mav_data_stream, 2), do: :mav_data_stream_extended_status
  def decode(:mav_data_stream, 3), do: :mav_data_stream_rc_channels
  def decode(:mav_data_stream, 4), do: :mav_data_stream_raw_controller
  def decode(:mav_data_stream, 6), do: :mav_data_stream_position
  def decode(:mav_data_stream, 10), do: :mav_data_stream_extra1
  def decode(:mav_data_stream, 11), do: :mav_data_stream_extra2
  def decode(:mav_data_stream, 12), do: :mav_data_stream_extra3
  def decode(:mav_roi, 0), do: :mav_roi_none
  def decode(:mav_roi, 1), do: :mav_roi_wpnext
  def decode(:mav_roi, 2), do: :mav_roi_wpindex
  def decode(:mav_roi, 3), do: :mav_roi_location
  def decode(:mav_roi, 4), do: :mav_roi_target
  def decode(:mav_cmd_ack, nil), do: :mav_cmd_ack_ok
  def decode(:mav_cmd_ack, nil), do: :mav_cmd_ack_err_fail
  def decode(:mav_cmd_ack, nil), do: :mav_cmd_ack_err_access_denied
  def decode(:mav_cmd_ack, nil), do: :mav_cmd_ack_err_not_supported
  def decode(:mav_cmd_ack, nil), do: :mav_cmd_ack_err_coordinate_frame_not_supported
  def decode(:mav_cmd_ack, nil), do: :mav_cmd_ack_err_coordinates_out_of_range
  def decode(:mav_cmd_ack, nil), do: :mav_cmd_ack_err_x_lat_out_of_range
  def decode(:mav_cmd_ack, nil), do: :mav_cmd_ack_err_y_lon_out_of_range
  def decode(:mav_cmd_ack, nil), do: :mav_cmd_ack_err_z_alt_out_of_range
  def decode(:mav_param_type, 1), do: :mav_param_type_uint8
  def decode(:mav_param_type, 2), do: :mav_param_type_int8
  def decode(:mav_param_type, 3), do: :mav_param_type_uint16
  def decode(:mav_param_type, 4), do: :mav_param_type_int16
  def decode(:mav_param_type, 5), do: :mav_param_type_uint32
  def decode(:mav_param_type, 6), do: :mav_param_type_int32
  def decode(:mav_param_type, 7), do: :mav_param_type_uint64
  def decode(:mav_param_type, 8), do: :mav_param_type_int64
  def decode(:mav_param_type, 9), do: :mav_param_type_real32
  def decode(:mav_param_type, 10), do: :mav_param_type_real64
  def decode(:mav_result, 0), do: :mav_result_accepted
  def decode(:mav_result, 1), do: :mav_result_temporarily_rejected
  def decode(:mav_result, 2), do: :mav_result_denied
  def decode(:mav_result, 3), do: :mav_result_unsupported
  def decode(:mav_result, 4), do: :mav_result_failed
  def decode(:mav_result, 5), do: :mav_result_in_progress
  def decode(:mav_mission_result, 0), do: :mav_mission_accepted
  def decode(:mav_mission_result, 1), do: :mav_mission_error
  def decode(:mav_mission_result, 2), do: :mav_mission_unsupported_frame
  def decode(:mav_mission_result, 3), do: :mav_mission_unsupported
  def decode(:mav_mission_result, 4), do: :mav_mission_no_space
  def decode(:mav_mission_result, 5), do: :mav_mission_invalid
  def decode(:mav_mission_result, 6), do: :mav_mission_invalid_param1
  def decode(:mav_mission_result, 7), do: :mav_mission_invalid_param2
  def decode(:mav_mission_result, 8), do: :mav_mission_invalid_param3
  def decode(:mav_mission_result, 9), do: :mav_mission_invalid_param4
  def decode(:mav_mission_result, 10), do: :mav_mission_invalid_param5_x
  def decode(:mav_mission_result, 11), do: :mav_mission_invalid_param6_y
  def decode(:mav_mission_result, 12), do: :mav_mission_invalid_param7
  def decode(:mav_mission_result, 13), do: :mav_mission_invalid_sequence
  def decode(:mav_mission_result, 14), do: :mav_mission_denied
  def decode(:mav_severity, 0), do: :mav_severity_emergency
  def decode(:mav_severity, 1), do: :mav_severity_alert
  def decode(:mav_severity, 2), do: :mav_severity_critical
  def decode(:mav_severity, 3), do: :mav_severity_error
  def decode(:mav_severity, 4), do: :mav_severity_warning
  def decode(:mav_severity, 5), do: :mav_severity_notice
  def decode(:mav_severity, 6), do: :mav_severity_info
  def decode(:mav_severity, 7), do: :mav_severity_debug
  def decode(:mav_power_status, 1), do: :mav_power_status_brick_valid
  def decode(:mav_power_status, 2), do: :mav_power_status_servo_valid
  def decode(:mav_power_status, 4), do: :mav_power_status_usb_connected
  def decode(:mav_power_status, 8), do: :mav_power_status_periph_overcurrent
  def decode(:mav_power_status, 16), do: :mav_power_status_periph_hipower_overcurrent
  def decode(:mav_power_status, 32), do: :mav_power_status_changed
  def decode(:serial_control_dev, 0), do: :serial_control_dev_telem1
  def decode(:serial_control_dev, 1), do: :serial_control_dev_telem2
  def decode(:serial_control_dev, 2), do: :serial_control_dev_gps1
  def decode(:serial_control_dev, 3), do: :serial_control_dev_gps2
  def decode(:serial_control_dev, 10), do: :serial_control_dev_shell
  def decode(:serial_control_flag, 1), do: :serial_control_flag_reply
  def decode(:serial_control_flag, 2), do: :serial_control_flag_respond
  def decode(:serial_control_flag, 4), do: :serial_control_flag_exclusive
  def decode(:serial_control_flag, 8), do: :serial_control_flag_blocking
  def decode(:serial_control_flag, 16), do: :serial_control_flag_multi
  def decode(:mav_distance_sensor, 0), do: :mav_distance_sensor_laser
  def decode(:mav_distance_sensor, 1), do: :mav_distance_sensor_ultrasound
  def decode(:mav_distance_sensor, 2), do: :mav_distance_sensor_infrared
  def decode(:mav_sensor_orientation, 0), do: :mav_sensor_rotation_none
  def decode(:mav_sensor_orientation, 1), do: :mav_sensor_rotation_yaw_45
  def decode(:mav_sensor_orientation, 2), do: :mav_sensor_rotation_yaw_90
  def decode(:mav_sensor_orientation, 3), do: :mav_sensor_rotation_yaw_135
  def decode(:mav_sensor_orientation, 4), do: :mav_sensor_rotation_yaw_180
  def decode(:mav_sensor_orientation, 5), do: :mav_sensor_rotation_yaw_225
  def decode(:mav_sensor_orientation, 6), do: :mav_sensor_rotation_yaw_270
  def decode(:mav_sensor_orientation, 7), do: :mav_sensor_rotation_yaw_315
  def decode(:mav_sensor_orientation, 8), do: :mav_sensor_rotation_roll_180
  def decode(:mav_sensor_orientation, 9), do: :mav_sensor_rotation_roll_180_yaw_45
  def decode(:mav_sensor_orientation, 10), do: :mav_sensor_rotation_roll_180_yaw_90
  def decode(:mav_sensor_orientation, 11), do: :mav_sensor_rotation_roll_180_yaw_135
  def decode(:mav_sensor_orientation, 12), do: :mav_sensor_rotation_pitch_180
  def decode(:mav_sensor_orientation, 13), do: :mav_sensor_rotation_roll_180_yaw_225
  def decode(:mav_sensor_orientation, 14), do: :mav_sensor_rotation_roll_180_yaw_270
  def decode(:mav_sensor_orientation, 15), do: :mav_sensor_rotation_roll_180_yaw_315
  def decode(:mav_sensor_orientation, 16), do: :mav_sensor_rotation_roll_90
  def decode(:mav_sensor_orientation, 17), do: :mav_sensor_rotation_roll_90_yaw_45
  def decode(:mav_sensor_orientation, 18), do: :mav_sensor_rotation_roll_90_yaw_90
  def decode(:mav_sensor_orientation, 19), do: :mav_sensor_rotation_roll_90_yaw_135
  def decode(:mav_sensor_orientation, 20), do: :mav_sensor_rotation_roll_270
  def decode(:mav_sensor_orientation, 21), do: :mav_sensor_rotation_roll_270_yaw_45
  def decode(:mav_sensor_orientation, 22), do: :mav_sensor_rotation_roll_270_yaw_90
  def decode(:mav_sensor_orientation, 23), do: :mav_sensor_rotation_roll_270_yaw_135
  def decode(:mav_sensor_orientation, 24), do: :mav_sensor_rotation_pitch_90
  def decode(:mav_sensor_orientation, 25), do: :mav_sensor_rotation_pitch_270
  def decode(:mav_sensor_orientation, 26), do: :mav_sensor_rotation_pitch_180_yaw_90
  def decode(:mav_sensor_orientation, 27), do: :mav_sensor_rotation_pitch_180_yaw_270
  def decode(:mav_sensor_orientation, 28), do: :mav_sensor_rotation_roll_90_pitch_90
  def decode(:mav_sensor_orientation, 29), do: :mav_sensor_rotation_roll_180_pitch_90
  def decode(:mav_sensor_orientation, 30), do: :mav_sensor_rotation_roll_270_pitch_90
  def decode(:mav_sensor_orientation, 31), do: :mav_sensor_rotation_roll_90_pitch_180
  def decode(:mav_sensor_orientation, 32), do: :mav_sensor_rotation_roll_270_pitch_180
  def decode(:mav_sensor_orientation, 33), do: :mav_sensor_rotation_roll_90_pitch_270
  def decode(:mav_sensor_orientation, 34), do: :mav_sensor_rotation_roll_180_pitch_270
  def decode(:mav_sensor_orientation, 35), do: :mav_sensor_rotation_roll_270_pitch_270
  def decode(:mav_sensor_orientation, 36), do: :mav_sensor_rotation_roll_90_pitch_180_yaw_90
  def decode(:mav_sensor_orientation, 37), do: :mav_sensor_rotation_roll_90_yaw_270
  def decode(:mav_sensor_orientation, 38), do: :mav_sensor_rotation_roll_315_pitch_315_yaw_315
  def decode(:mav_protocol_capability, 1), do: :mav_protocol_capability_mission_float
  def decode(:mav_protocol_capability, 2), do: :mav_protocol_capability_param_float
  def decode(:mav_protocol_capability, 4), do: :mav_protocol_capability_mission_int
  def decode(:mav_protocol_capability, 8), do: :mav_protocol_capability_command_int
  def decode(:mav_protocol_capability, 16), do: :mav_protocol_capability_param_union
  def decode(:mav_protocol_capability, 32), do: :mav_protocol_capability_ftp
  def decode(:mav_protocol_capability, 64), do: :mav_protocol_capability_set_attitude_target
  def decode(:mav_protocol_capability, 128), do: :mav_protocol_capability_set_position_target_local_ned
  def decode(:mav_protocol_capability, 256), do: :mav_protocol_capability_set_position_target_global_int
  def decode(:mav_protocol_capability, 512), do: :mav_protocol_capability_terrain
  def decode(:mav_protocol_capability, 1024), do: :mav_protocol_capability_set_actuator_target
  def decode(:mav_protocol_capability, 2048), do: :mav_protocol_capability_flight_termination
  def decode(:mav_protocol_capability, 4096), do: :mav_protocol_capability_compass_calibration
  def decode(:mav_protocol_capability, 8192), do: :mav_protocol_capability_mavlink2
  def decode(:mav_protocol_capability, 16384), do: :mav_protocol_capability_mission_fence
  def decode(:mav_protocol_capability, 32768), do: :mav_protocol_capability_mission_rally
  def decode(:mav_protocol_capability, 65536), do: :mav_protocol_capability_flight_information
  def decode(:mav_mission_type, 0), do: :mav_mission_type_mission
  def decode(:mav_mission_type, 1), do: :mav_mission_type_fence
  def decode(:mav_mission_type, 2), do: :mav_mission_type_rally
  def decode(:mav_mission_type, 255), do: :mav_mission_type_all
  def decode(:mav_estimator_type, 1), do: :mav_estimator_type_naive
  def decode(:mav_estimator_type, 2), do: :mav_estimator_type_vision
  def decode(:mav_estimator_type, 3), do: :mav_estimator_type_vio
  def decode(:mav_estimator_type, 4), do: :mav_estimator_type_gps
  def decode(:mav_estimator_type, 5), do: :mav_estimator_type_gps_ins
  def decode(:mav_battery_type, 0), do: :mav_battery_type_unknown
  def decode(:mav_battery_type, 1), do: :mav_battery_type_lipo
  def decode(:mav_battery_type, 2), do: :mav_battery_type_life
  def decode(:mav_battery_type, 3), do: :mav_battery_type_lion
  def decode(:mav_battery_type, 4), do: :mav_battery_type_nimh
  def decode(:mav_battery_function, 0), do: :mav_battery_function_unknown
  def decode(:mav_battery_function, 1), do: :mav_battery_function_all
  def decode(:mav_battery_function, 2), do: :mav_battery_function_propulsion
  def decode(:mav_battery_function, 3), do: :mav_battery_function_avionics
  def decode(:mav_battery_function, 4), do: :mav_battery_type_payload
  def decode(:mav_vtol_state, 0), do: :mav_vtol_state_undefined
  def decode(:mav_vtol_state, 1), do: :mav_vtol_state_transition_to_fw
  def decode(:mav_vtol_state, 2), do: :mav_vtol_state_transition_to_mc
  def decode(:mav_vtol_state, 3), do: :mav_vtol_state_mc
  def decode(:mav_vtol_state, 4), do: :mav_vtol_state_fw
  def decode(:mav_landed_state, 0), do: :mav_landed_state_undefined
  def decode(:mav_landed_state, 1), do: :mav_landed_state_on_ground
  def decode(:mav_landed_state, 2), do: :mav_landed_state_in_air
  def decode(:mav_landed_state, 3), do: :mav_landed_state_takeoff
  def decode(:mav_landed_state, 4), do: :mav_landed_state_landing
  def decode(:adsb_altitude_type, 0), do: :adsb_altitude_type_pressure_qnh
  def decode(:adsb_altitude_type, 1), do: :adsb_altitude_type_geometric
  def decode(:adsb_emitter_type, 0), do: :adsb_emitter_type_no_info
  def decode(:adsb_emitter_type, 1), do: :adsb_emitter_type_light
  def decode(:adsb_emitter_type, 2), do: :adsb_emitter_type_small
  def decode(:adsb_emitter_type, 3), do: :adsb_emitter_type_large
  def decode(:adsb_emitter_type, 4), do: :adsb_emitter_type_high_vortex_large
  def decode(:adsb_emitter_type, 5), do: :adsb_emitter_type_heavy
  def decode(:adsb_emitter_type, 6), do: :adsb_emitter_type_highly_manuv
  def decode(:adsb_emitter_type, 7), do: :adsb_emitter_type_rotocraft
  def decode(:adsb_emitter_type, 8), do: :adsb_emitter_type_unassigned
  def decode(:adsb_emitter_type, 9), do: :adsb_emitter_type_glider
  def decode(:adsb_emitter_type, 10), do: :adsb_emitter_type_lighter_air
  def decode(:adsb_emitter_type, 11), do: :adsb_emitter_type_parachute
  def decode(:adsb_emitter_type, 12), do: :adsb_emitter_type_ultra_light
  def decode(:adsb_emitter_type, 13), do: :adsb_emitter_type_unassigned2
  def decode(:adsb_emitter_type, 14), do: :adsb_emitter_type_uav
  def decode(:adsb_emitter_type, 15), do: :adsb_emitter_type_space
  def decode(:adsb_emitter_type, 16), do: :adsb_emitter_type_unassgined3
  def decode(:adsb_emitter_type, 17), do: :adsb_emitter_type_emergency_surface
  def decode(:adsb_emitter_type, 18), do: :adsb_emitter_type_service_surface
  def decode(:adsb_emitter_type, 19), do: :adsb_emitter_type_point_obstacle
  def decode(:adsb_flags, 1), do: :adsb_flags_valid_coords
  def decode(:adsb_flags, 2), do: :adsb_flags_valid_altitude
  def decode(:adsb_flags, 4), do: :adsb_flags_valid_heading
  def decode(:adsb_flags, 8), do: :adsb_flags_valid_velocity
  def decode(:adsb_flags, 16), do: :adsb_flags_valid_callsign
  def decode(:adsb_flags, 32), do: :adsb_flags_valid_squawk
  def decode(:adsb_flags, 64), do: :adsb_flags_simulated
  def decode(:mav_do_reposition_flags, 1), do: :mav_do_reposition_flags_change_mode
  def decode(:estimator_status_flags, 1), do: :estimator_attitude
  def decode(:estimator_status_flags, 2), do: :estimator_velocity_horiz
  def decode(:estimator_status_flags, 4), do: :estimator_velocity_vert
  def decode(:estimator_status_flags, 8), do: :estimator_pos_horiz_rel
  def decode(:estimator_status_flags, 16), do: :estimator_pos_horiz_abs
  def decode(:estimator_status_flags, 32), do: :estimator_pos_vert_abs
  def decode(:estimator_status_flags, 64), do: :estimator_pos_vert_agl
  def decode(:estimator_status_flags, 128), do: :estimator_const_pos_mode
  def decode(:estimator_status_flags, 256), do: :estimator_pred_pos_horiz_rel
  def decode(:estimator_status_flags, 512), do: :estimator_pred_pos_horiz_abs
  def decode(:estimator_status_flags, 1024), do: :estimator_gps_glitch
  def decode(:motor_test_throttle_type, 0), do: :motor_test_throttle_percent
  def decode(:motor_test_throttle_type, 1), do: :motor_test_throttle_pwm
  def decode(:motor_test_throttle_type, 2), do: :motor_test_throttle_pilot
  def decode(:gps_input_ignore_flags, 1), do: :gps_input_ignore_flag_alt
  def decode(:gps_input_ignore_flags, 2), do: :gps_input_ignore_flag_hdop
  def decode(:gps_input_ignore_flags, 4), do: :gps_input_ignore_flag_vdop
  def decode(:gps_input_ignore_flags, 8), do: :gps_input_ignore_flag_vel_horiz
  def decode(:gps_input_ignore_flags, 16), do: :gps_input_ignore_flag_vel_vert
  def decode(:gps_input_ignore_flags, 32), do: :gps_input_ignore_flag_speed_accuracy
  def decode(:gps_input_ignore_flags, 64), do: :gps_input_ignore_flag_horizontal_accuracy
  def decode(:gps_input_ignore_flags, 128), do: :gps_input_ignore_flag_vertical_accuracy
  def decode(:mav_collision_action, 0), do: :mav_collision_action_none
  def decode(:mav_collision_action, 1), do: :mav_collision_action_report
  def decode(:mav_collision_action, 2), do: :mav_collision_action_ascend_or_descend
  def decode(:mav_collision_action, 3), do: :mav_collision_action_move_horizontally
  def decode(:mav_collision_action, 4), do: :mav_collision_action_move_perpendicular
  def decode(:mav_collision_action, 5), do: :mav_collision_action_rtl
  def decode(:mav_collision_action, 6), do: :mav_collision_action_hover
  def decode(:mav_collision_threat_level, 0), do: :mav_collision_threat_level_none
  def decode(:mav_collision_threat_level, 1), do: :mav_collision_threat_level_low
  def decode(:mav_collision_threat_level, 2), do: :mav_collision_threat_level_high
  def decode(:mav_collision_src, 0), do: :mav_collision_src_adsb
  def decode(:mav_collision_src, 1), do: :mav_collision_src_mavlink_gps_global_int
  def decode(:gps_fix_type, 0), do: :gps_fix_type_no_gps
  def decode(:gps_fix_type, 1), do: :gps_fix_type_no_fix
  def decode(:gps_fix_type, 2), do: :gps_fix_type_2d_fix
  def decode(:gps_fix_type, 3), do: :gps_fix_type_3d_fix
  def decode(:gps_fix_type, 4), do: :gps_fix_type_dgps
  def decode(:gps_fix_type, 5), do: :gps_fix_type_rtk_float
  def decode(:gps_fix_type, 6), do: :gps_fix_type_rtk_fixed
  def decode(:gps_fix_type, 7), do: :gps_fix_type_static
  
  @doc "Convert a binary into a Mavlink message"
  @spec decode(<<>>) :: message
  def decode(<<>>) do
    # TODO
  end
  
  defprotocol Message do
    @doc "Encode a message"
    @spec encode_msg(Mavlink.message) :: <<>>
    def encode_msg(message)
    
    @doc "Get message id"
    @spec msg_id(Mavlink.message) :: Mavlink.message_id
    def msg_id(message)
    
    @doc "Describe message"
    @spec describe_msg(Mavlink.message) :: String.t
    def describe_msg(message)
    
    @doc "Return keyword list of field details"
    @spec describe_msg_fields(Mavlink.message) :: Mavlink.field_descrption_list
    def describe_msg_fields(message)
  end
  
  defmodule Heartbeat do
    
    defstruct type: nil, autopilot: nil, base_mode: nil, custom_mode: nil, system_status: nil, mavlink_version: 3
   
    @typedoc "The heartbeat message shows that a system is present and responding...Type of the MAV..."
    @type t :: %Heartbeat{
      type: Mavlink.mav_type,
      autopilot: Mavlink.mav_autopilot,
      base_mode: Mavlink.mav_mode_flag,
      custom_mode: Mavlink.uint32,
      system_status: Mavlink.mav_state,
      mavlink_version: Mavlink.uint8
    }
    
    defimpl Message, for: Heartbeat do
      def msg_id(message), do: 0
      def encode_msg(message), do: <<>>
      def describe_msg(message), do: "The heartbeat message shows..."
      def describe_msg_fields(message), do: []
    end
    
  end
  
end
